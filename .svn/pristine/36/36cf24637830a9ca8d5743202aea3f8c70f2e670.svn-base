<template>
  <simple-container @on-query="onQuery" @on-reset="onReset" :more="activeName === 'dealed'" :menuName="params.business.value">
    <template slot="title">
      <div class="title-right">
        <hs-tabs v-model="activeName">
          <hs-tab-pane label="待处理" name="undeal"></hs-tab-pane>
          <hs-tab-pane label="已处理" name="dealed"></hs-tab-pane>
        </hs-tabs>
      </div>
    </template>
    <template slot="query">
      <el-form ref="form" :model="form" label-width="98px" :inline="true">
        <el-form-item label="学习类型">
          <dict-select ref="study" @change="studyChange" :option="options.study" :prop="{ key: 'id', value: 'studyName' }" :val.sync="form.study"></dict-select>
        </el-form-item>
        <el-form-item label="院校">
          <dict-select ref="school" @change="schoolChange" :option="options.school" :prop="{ key: 'id', value: 'showValue' }" format="school" :val.sync="form.stuSchoolId"></dict-select>
        </el-form-item>
        <el-form-item label="年级">
          <dict-select ref="grade" @change="gradeChange" :option="options.grade" :prop="{ key: 'id', value: 'gradeName' }" :val.sync="form.stuGradeId"></dict-select>
        </el-form-item>
        <!-- <el-form-item label="学年">
          <dict-select @change="schoolYearChange" :val.sync="form.schoolYear" constant-group-name="schoolYear"></dict-select>
        </el-form-item> -->
        <el-form-item label="专业">
          <dict-select ref="subject" format="subject" @change="gradeChange" :option="options.subject" :prop="{ key: 'id', value: 'showValue' }" :val.sync="form.stuSubjectId"></dict-select>
        </el-form-item>
        <el-form-item label="学生姓名">
          <hs-input size="mini" v-model="form.stuName" placeholder="请输入学生姓名" ></hs-input>
        </el-form-item>
        <el-form-item label="助记码">
          <hs-input size="mini" v-model="form.stuMnemonicCode" placeholder="请输入助记码" ></hs-input>
        </el-form-item>
        <el-form-item label="身份证号">
          <hs-input size="mini" v-model="form.stuPaperworkNumber" placeholder="请输入身份证号" ></hs-input>
        </el-form-item>
        <el-form-item label="操作人" :class="isDealed">
          <hs-input size="mini" v-model="form.userName" placeholder="请输入操作人" ></hs-input>
        </el-form-item>
        <el-form-item label="减免时间" :class="isDealed">
          <el-date-picker
            range-separator="至"
            value-format="timestamp"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :picker-options="pickerOptions"
            type="daterange"
            format="yyyy-MM-dd HH:mm"
            :default-time="['00:00:00','23:59:59']"
            v-model="form.reduceDate"
            size="mini">
          </el-date-picker>
        </el-form-item>
        <el-form-item label="创建时间" :class="isDealed">
          <el-date-picker
            range-separator="至"
            value-format="timestamp"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :picker-options="pickerOptions"
            type="daterange"
            format="yyyy-MM-dd HH:mm"
            :default-time="['00:00:00','23:59:59']"
            v-model="form.createTime"
            size="mini">
          </el-date-picker>
        </el-form-item>
        <el-form-item label="流水号" :class="isDealed">
          <hs-input size="mini" v-model="form.billNo" placeholder="请输入流水号" ></hs-input>
        </el-form-item>
        <el-form-item label="流水状态" :class="isDealed">
          <dict-select :val.sync="form.status" :exclude="[3]" constant-group-name="feesStatus"></dict-select>
        </el-form-item>
        <el-form-item label="学籍状态" :class="isDealed">
          <dict-select :val.sync="form.stuSchoolRollStatus" constant-group-name="schoolRollStatus"></dict-select>
        </el-form-item>
        <el-form-item label="所属中心">
          <dict-select ref="center" @change="centerChange" :option="options.center" :prop="{ key: 'id', value: 'centerName' }" :val.sync="form.centerId"></dict-select>
        </el-form-item>
        <el-form-item label="学生来源" :class="isDealed">
          <el-cascader filterable :show-all-levels="!1" clearable size="mini" v-model="form.stuSource" :props="{ emitPath: !1, checkStrictly: !1, label: 'optionValue', value: 'optionKey' }" :options="stuSourceData"></el-cascader>
        </el-form-item>
      </el-form>
    </template>
    <template>
      <simple-table :selectable="selectable" :class="isUndeal" :isCheckbox="!0" :data="undealTableData" :columns="undealColumns" :loading="loading" @query="onQuery" :pagination.sync="pagination" @row-dbclick="partpay" :dicts="['stuSex','stuSchoolRollStatus']">
        <template slot="operator" slot-scope="{ scope }">
          <hs-button
          v-permission="['fcsParttimeRedUnProcessedInsert']"
            @click.native.prevent="partpay(scope.row)"
            type="text"
            size="small">
            减免
          </hs-button>
        </template>
        <template slot="action-block">
          <hs-button type="danger" icon="hs-icon-plus" v-permission="['fcsParttimeRedUnProcessedBatchInsert']" @click="batchCollect" size="mini">批量减免</hs-button>
        </template>
      </simple-table>
      <simple-table @column-set-save="columnSetSave" :operator="{ width: 120 }" :class="isDealed" ref="hsTable" :export-name="exportName" :exportable="exportable" :export-data="getExportData" :isCheckbox="!0" @selection-change="selectionChange" :data="dealedTableData" :columns="dealedColumns" :loading="loading" @query="onQuery" :pagination.sync="pagination" @row-dbclick="showDetail" :dicts="['abnormalState', 'stuSex', 'feesStatus','payType','openInvoice', 'stuSchoolRollStatus']">
        <template slot="operator" slot-scope="{ scope }">
          <hs-button
            v-permission="['fcsParttimeRedProcessedDetail']"
            @click.native.prevent="showdetail(scope.row)"
            type="text"
            size="small">
            查看
          </hs-button>
          <hs-button
            v-permission="['fcsParttimeRedProcessedUpdate']"
            @click.native.prevent="editdetail(scope.row)"
            type="text"
            size="small">
            编辑
          </hs-button>
        </template>
        <template slot="action-block">
          <hs-button type="info" :disabled="this.selectedRow.length === 0" icon="hs-icon-close" v-permission="['fcsParttimeRedProcessedVerify']" @click="onReduceAlreadyNullifyPayRecord" size="mini">作废</hs-button>
          <hs-button type="danger" icon="hs-icon-download" v-permission="['partTimeReduceExport']" @click="onExport" size="mini">导出</hs-button>
          <hs-button type="danger" :disabled="this.selectedRow.length === 0" icon="hs-icon-c-scale-to-original" @click="onOpen" v-permission="['fcsOpenInvoice']" size="mini">开票</hs-button>
        </template>
      </simple-table>
    </template>
    <!-- <detail-dialog title="详情" :data="detailData" :visible.sync="visible" ></detail-dialog> -->
  </simple-container>
</template>

<script lang="ts">
import { Vue, Component, Watch, Prop } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import DrawerSelect from '@/components/busi/drawerselect.vue'
import SimpleContainer from '@/components/container/index.vue'
import util from '@/utils/busi/util'
import dayjs from 'dayjs'
import { checkPermission } from '@/utils/permission'
import { collectApi } from '@/api/collect'
import { commonApi } from '@/api/common'
import { getConstantByGroup } from '@/utils/dicts/constdict'
import { LocalStorage } from '@/utils/storage'
import { isEmpty } from '@/utils/common'
@Component({
  name: 'reduce-manage',
  components: {
    SimpleContainer,
    SimpleTable,
    DictSelect,
    DrawerSelect
  }
})
export default class ReduceManage extends Vue {
  @Prop({ type: Object })
  private params!: object|any

  private activeName = 'undeal'

  get isDealed () {
    return this.activeName === 'dealed' ? '' : 'display-hidden'
  }

  get isUndeal () {
    return this.activeName === 'undeal' ? '' : 'display-hidden'
  }

  get pickerOptions () {
    return util.pickerOptions
  }

  private options: any = {
    study: {
      url: '/fcs/study/getStudySelect',
      data: {
        businessId: this.params.business.key
      }
    },
    school: {
      url: '/fcs/school/getSchoolSelect',
      data: {
        businessId: this.params.business.key
      }
    },
    grade: {
      url: '/fcs/grade/getGradeSelect',
      data: {
        // stuSchoolId: -1
      }
    },
    subject: {
      url: '/fcs/subject/getSubjectSelect',
      data: {
        // stuSchoolId: -1
      }
    },
    center: {
      url: '/fcs/center/getCenterSelect',
      data: {
        // businessId: 1
      }
    }
  }

  private studyChange () {
    this.form.stuSchoolId = ''
    this.form.stuGradeId = ''
    this.form.stuSubjectId = ''
    this.options.school.data.studyId = this.form.study || null;
    (this.$refs.school as any).getList()
  }

  private schoolChange () {
    this.form.stuGradeId = ''
    this.form.stuSubjectId = ''
    this.options.grade.data.schoolId = this.form.stuSchoolId || null
    this.options.subject.data.schoolId = this.form.stuSchoolId || null;
    (this.$refs.grade as any).getList();
    (this.$refs.subject as any).getList()
  }

  private stuSourceData: any = []

  private schoolYearChange () {
    // do
  }

  private gradeChange () {
    // do
  }

  private subjectChange () {
    // do
  }

  get exportName () {
    const day = dayjs(new Date()).format('YYYYMMDD')
    return `业余学历学生减免-${day}`
  }

  private exportParam () {
    const temp = { ...this.form }
    return util.trimForm({ ...temp }, this.activeName === 'dealed' ? this.dealedColumns : this.undealColumns)
  }

  private columnSetSave (row: any) {
    this.dealedColumns = row
  }

  private exportable = {
    exportable: checkPermission(['partTimeReduceExport']),
    src: '/fcs/parttime/reduce/already/process/export/list',
    data: this.exportParam
  }

  private onExport () {
    const menuName = LocalStorage.getObj('menu-name')
    this.$confirm('确认要导出' + menuName + '数据?', '提示', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }).then(async () => {
      const columnKeys:any = []
      this.dealedColumns.forEach((item:any) => {
        if (!item.hidden) {
          columnKeys.push({
            prop: item.export || item.prop,
            label: item.label
          })
        }
      })
      const params = this.getParams()
      const { data, headers } = await collectApi('partTimeReduceExport', { ...params, businessId: this.params.business.key, exportHeads: columnKeys })
      if (!data) {
        return
      }
      util.exportData(data, menuName + '数据.' + headers['content-file-suffix'])
      this.$message({
        type: 'success',
        message: '导出成功!'
      })
    }).catch(() => { console.log('catch error') })
  }

  private async onOpen () {
    this.$confirm('是否确定开票?', '提示', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }).then(async () => {
      const ids = this.selectedRow.map((v: any) => v.payRecordId)
      await commonApi('openInvoice', ids).then((res:any) => {
        if (res.code === 10000) {
          this.$message.success({ message: '开票成功', showClose: !0 })
          this.onQuery()
        } else {
          this.$message.error({ message: res.message, showClose: !0 })
        }
      })
      this.onQuery()
    }).catch(() => {
      console.log('catch error')
      this.loading = false
    })
  }

  private showdetail (row: any) {
    this.$router.push({
      name: 'parttimereducepay',
      params: Object.assign(row, { action: 'view', business: this.params.business.key, payTime: row.payTime })
    },
    () => {
      // do
      this.loading = !1
    })
  }

  private editdetail (row: any) {
    // row.id = row.stuId
    this.$router.push({
      name: 'parttimereducepay',
      params: Object.assign(row, { action: 'edit', business: this.params.business.key })
    },
    () => {
      // do
      this.loading = !1
    })
  }

  private selectedRow: any[] = []

  private selectionChange (selected: any) {
    this.selectedRow = selected
  }

  private async onReduceAlreadyNullifyPayRecord () {
    if (!this.selectedRow || this.selectedRow.length === 0) {
      this.$alert('请选择项目')
      return
    }
    this.$confirm('确认要作废该数据?', '提示', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }).then(async () => {
      const ids = this.selectedRow.map((v: any) => v.id)
      await collectApi('parttimeReduceAlreadyProcessNullifyPayRecord', {
        ids: ids.join(',')
      }).then((res:any) => {
        if (res.code === 10000) {
          this.$message.success({ message: '作废成功', showClose: !0 })
          this.onQuery()
        } else {
          this.$message.error({ message: res.message, showClose: !0 })
        }
      })
    }).catch(() => {
      console.log('catch error')
      this.loading = false
    })
  }

  private form: any = {
    study: null,
    reduceDate: '',
    createTime: '',
    stuSchoolId: null,
    stuGradeId: null,
    stuSubjectId: null
  }

  private loading = !1

  private undealTableData = {
    list: [],
    totalCount: -1
  }

  private dealedTableData = {
    list: [],
    totalCount: -1
  }

  private undealColumns = [{
    prop: 'stuName',
    label: '学生姓名'
  },
  {
    prop: 'stuSex',
    label: '性别'
  },
  {
    prop: 'studyName',
    label: '学习类型'
  },
  {
    prop: 'stuSchoolName',
    label: '院校名称'
  },
  {
    prop: 'stuGradeName',
    label: '年级'
  },
  {
    prop: 'stuSubjectName',
    label: '专业名称'
  },
  {
    prop: 'stuBelongCenterName',
    label: '所属中心'
  },
  {
    prop: 'stuSourceName',
    label: '学生来源'
  },
  {
    prop: 'stuPaperworkNumber',
    label: '身份证号',
    format: 'str:-6'
  },
  {
    prop: 'stuSchoolRollStatus',
    label: '学籍状态'
  }]

  private dealedColumns = [{
    prop: 'billNo',
    label: '流水号'
  },
  {
    prop: 'stuName',
    label: '学生姓名'
  },
  {
    prop: 'studyName',
    label: '学习类型'
  },
  {
    prop: 'schoolName',
    label: '院校名称'
  },
  {
    prop: 'gradeName',
    label: '年级'
  },
  {
    prop: 'subjectName',
    label: '专业'
  },
  {
    prop: 'abnormalState',
    label: '异动状态',
    export: 'abnormalStateName'
  },
  {
    prop: 'stuSourceName',
    label: '学生来源'
  },
  {
    prop: 'stuBelongCenterName',
    label: '所属中心'
  },
  {
    prop: 'receivableAmount',
    label: '本次应收',
    format: 'money'
  },
  {
    prop: 'alreadyReductionAmount',
    label: '上次已减',
    format: 'money'
  },
  {
    prop: 'reductionAmount',
    label: '本次减免',
    format: 'money'
  },
  {
    prop: 'payType',
    label: '付款方式',
    export: 'payTypeName'
  },
  {
    prop: 'createName',
    label: '操作人'
  },
  {
    prop: 'payTime',
    label: '减免时间',
    format: 'date'
  },
  {
    prop: 'createTime',
    label: '创建时间',
    format: 'date'
  },
  {
    prop: 'feesStatus',
    label: '状态',
    export: 'statusName',
    'style-format': {
      f: [2],
      t: [1, 3]
    }
  },
  {
    prop: 'printNum',
    label: '打印次数'
  },
  {
    prop: 'openInvoice',
    label: '开票',
    export: 'openInvoiceName'
  }]

  @Watch('activeName')
  private activeNameChange () {
    this.undealTableData = {
      list: [],
      totalCount: -1
    }
    this.dealedTableData = {
      list: [],
      totalCount: -1
    }
    this.onQuery()
  }

  private pagination: any = {
    currentPage: 1,
    pageSize: 10
  }

  private getParams () {
    const form = util.trimForm({ ...this.form })
    if (form.reduceDate && form.reduceDate.length === 2) {
      form.beginPayTime = form.reduceDate[0]
      form.endPayTime = form.reduceDate[1]
      delete form.reduceDate
    }
    if (form.createTime && form.createTime.length === 2) {
      form.beginCreateTime = form.createTime[0]
      form.endCreateTime = form.createTime[1]
      delete form.createTime
    }
    form.schoolId = form.stuSchoolId
    return {
      ...form,
      subjectId: form.stuSubjectId,
      stuBusinessId: this.params.business.key,
      createName: form.userName,
      gradeId: form.stuGradeId,
      business: this.params.business.key
    }
  }

  private async onQuery (pagination: any = null) {
    this.loading = !0
    !pagination && (this.pagination.currentPage = 1)
    const form = this.getParams()
    if (this.activeName === 'dealed') {
      await collectApi('parttimeReduceAlreadyProcessList', {
        ...form,
        ...pagination || this.pagination
      }).then(async (res: any) => {
        this.loading = !1
        this.dealedTableData.list = res.object.list.map((v: any) => {
          const item = this.stuSourceDict.filter((f:any) => f.key === v.stuSource)
          v.stuSourceName = item.length === 0 ? v.stuSource : item[0].value
          v.feesStatus = v.status
          v.payType = isEmpty(v.payType) ? '' : v.payType * 1
          return v
        })
        this.dealedTableData.totalCount = res.object.totalCount
      }).catch((err: any) => {
        console.log('err', err)
        this.loading = !1
      })
    } else {
      await collectApi('parttimeReduceUntreatedList', {
        ...form,
        ...pagination || this.pagination
      }).then(async (res: any) => {
        this.loading = !1
        this.undealTableData.list = res.object.list.map((v: any) => {
          const item = this.stuSourceDict.filter((f:any) => f.key === v.stuSource)
          v.stuSourceName = item.length === 0 ? v.stuSource : item[0].value
          return v
        })
        this.undealTableData.totalCount = res.object.totalCount
      }).catch((err: any) => {
        console.log('err', err)
        this.loading = !1
      })
    }
  }

  private onReset () {
    this.form = {
      study: null,
      reduceDate: '',
      createTime: '',
      stuSchoolId: null,
      gradeId: null,
      subject: null
    }
    this.options.school.data.studyId = this.form.study || null
    this.options.grade.data.schoolId = this.form.stuSchoolId || null
    this.options.subject.data.schoolId = this.form.stuSchoolId || null;
    (this.$refs.school as any).getList();
    (this.$refs.grade as any).getList();
    (this.$refs.subject as any).getList()

    this.onQuery()
  }

  private async partpay (row: any) {
    this.$router.push({
      name: 'parttimereducepay',
      params: Object.assign({ action: 'add', business: this.params.business.key }, row)
    },
    () => {
      // do
      this.loading = !1
    })
  }

  private batchCollect () {
    if (Number(this.params.business.key) === 0) {
      this.$alert('请选择业务', { type: 'error' })
      return
    }
    this.$router.push({
      name: 'reducebatchimport',
      params: Object.assign({ businessId: this.params.business.key })
    },
    () => {
      // do
      this.loading = !1
    })
  }

  private stuSourceDict: any = []

  private async initData () {
    await commonApi('studentSourceTree').then((res: any) => {
      if (res.code === 10000) {
        this.stuSourceData = res.object.list
      }
    })
    this.stuSourceDict = await getConstantByGroup('stuSource', { update: !0 })
    await this.onQuery()
  }

  private selectable () {
    return !0
  }

  activated () {
    this.loading = !0
    this.initData()
  }

  mounted () {
    this.loading = !0
    this.initData()
  }
}
</script>
<style lang="scss">
.el-picker-panel {
  z-index: 2030 !important;
}
.display-hidden{
  display: none !important;
}
</style>
