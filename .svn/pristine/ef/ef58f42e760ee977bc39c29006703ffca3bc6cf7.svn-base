<template>
  <div class="reduce-container">
    <header>
      <div class="line">
        <i class="hs-icon-user" /><span class="student-name">{{ data.info.stuName }}</span>
      </div>
      <div class="line">
        <static-item label="性别" :width="300"> {{ data.info.stuSexName }}</static-item>
        <static-item label="证件号" :width="300">{{ data.info.stuPaperworkNumber }}</static-item>
      </div>
      <div class="line">
        <static-item label="学校" :width="300" align="flex-start"> {{ data.info.stuSchoolName }}</static-item>
        <static-item label="专业" :width="300" align="flex-start">{{ data.info.stuSubjectName }}</static-item>
        <static-item label="年级" :width="200" align="flex-start"> {{ data.info.stuGradeName }}</static-item>
        <static-item label="学制" :width="200" align="flex-start"> {{ data.info.subLenName }}年</static-item>
      </div>
    </header>
    <section>
      <div class="line">
        <static-item required label="是否退学" :width="300">
          <dict-select :val.sync="form.outSchool" comm-group-name="radio"></dict-select>
        </static-item>
        <static-item required label="退费时间" :width="600">
          <el-date-picker
            v-model="form.payTime"
            type="datetime"
            size="mini"
            placeholder="选择日期时间">
          </el-date-picker>
        </static-item>
      </div>
      <div class="line">
        <hs-table
        ref="hsTable"
        id="editAbletrendsTable"
        :data="data.list"
        :border="!0"
        @selection-change="selectionChange"
        header-row-class-name="header-style">
          <hs-table-column align="center" header-align="center" type="selection" width="55"></hs-table-column>
          <hs-table-column prop="schoolName" label="缴费院校"></hs-table-column>
          <hs-table-column prop="gradeName" label="缴费年级"></hs-table-column>
          <hs-table-column prop="subjectName" label="缴费专业"></hs-table-column>
          <hs-table-column prop="feeItemName" label="收费项目"></hs-table-column>
          <hs-table-column prop="schoolYearName" label="学年"></hs-table-column>
          <hs-table-column prop="feeMust" label="必缴">
            <template slot-scope="scope">
              {{ scope.row.feeMust === 1 ? '是' : '否'}}
            </template>
          </hs-table-column>
          <hs-table-column prop="receivableAmount" :formatter="formatterMoney" label="应收"></hs-table-column>
          <hs-table-column prop="acceptedAmount" :formatter="formatterMoney" label="已收"></hs-table-column>
          <hs-table-column prop="alreadyReductionAmount" :formatter="formatterMoney" label="已减免"></hs-table-column>
          <hs-table-column prop="alreadyRefundAmount" :formatter="formatterMoney" label="已退"></hs-table-column>
          <hs-table-column prop="refundAmount" label="本次退费">
            <template slot-scope="scope">
              <span v-if="!data.list[scope.$index].edit">{{ generatingThousandthPer(data.list[scope.$index].refundAmount) }}</span>
              <hs-input v-else v-money size="mini" v-model.trim="data.list[scope.$index].refundAmount"></hs-input>
            </template>
          </hs-table-column>
          <hs-table-column prop="yetf" label="余额退费">
            <template slot-scope="scope">
              <span v-if="!data.list[scope.$index].edit">{{ generatingThousandthPer(data.list[scope.$index].feeRefundAmount) }}</span>
              <hs-input v-else v-money size="mini" v-model.trim="data.list[scope.$index].feeRefundAmount"></hs-input>
            </template>
          </hs-table-column>
        </hs-table>
      </div>
      <p style="color: #f56c6c;">备注：退款时如果有个人账户余额优先退款余额</p>
      <div class="line auto">
        <el-tooltip class="item" effect="dark" content="勾选项本次退款=本次退费+余额退费" placement="bottom"><i class="hs-icon-question" /></el-tooltip>
        <static-item label="本次退款" :width="350">{{ generatingThousandthPer(totalRefundAmount) }}</static-item>
        <el-tooltip class="item" effect="dark" content="本次退款后，个人账户余额剩余金额" placement="bottom"><i class="hs-icon-question" /></el-tooltip>
        <static-item label="剩余余额" :width="350">{{ generatingThousandthPer(totalFeeRefundAmount) }}</static-item>
      </div>
      <div class="line">
        <static-item label="单据摘要" :width="900" align="flex-start">
          <hs-input size="mini" type="textarea" maxlength="200" show-word-limit :rows="3" resize="none" v-model="form.remark" placeholder="请输入单据摘要" ></hs-input>
        </static-item>
      </div>
    </section>
    <footer><hs-button type="primary" v-show="action !== 'view'" @click="onFund" size="mini">退费</hs-button></footer>
  </div>
</template>

<script lang="ts">
import { Vue, Component } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import DetailDialog from '@/components/busi/table/detail.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import DrawerSelect from '@/components/busi/drawerselect.vue'
import Coverlap from '@/components/busi/coverlap.vue'
import StaticItem from '@/components/busi/staticitem.vue'
import util from '@/utils/busi/util'
import { getRefundItem, refundAlreadyProcessInsert, refundUntreatedVerifyRefund } from '@/api/collect'
import { getStuDetail } from '@/api/common'
@Component({
  name: 'refund',
  components: {
    SimpleTable,
    DetailDialog,
    DictSelect,
    Coverlap,
    StaticItem,
    DrawerSelect
  }
})
export default class Refund extends Vue {
  private activeName = 'reduce'

  private params: any = util.getRouterParams()

  private form: any = {
    outSchool: '',
    data: ''
  }

  get action () {
    return this.params.action
  }

  private generatingThousandthPer (num: any) {
    return util.generatingThousandthPer(num)
  }

  get totalRefundAmount () {
    return this.selectedRow.reduce((sum, any, i: any, v: any) => sum + v[i].refundAmount * 1, 0)
  }

  get totalFeeRefundAmount () {
    return this.selectedRow.reduce((sum, any, i: any, v: any) => sum + v[i].feeRefundAmount * 1, 0)
  }

  private data: any = {
    info: {},
    list: []
  }

  private selectedRow = []

  private selectionChange (selected: any) {
    this.selectedRow = selected
    const len = this.data.list.length
    for (let i = 0; i < len; i++) {
      this.data.list[i].edit = !1
      this.selectedRow.map((v: any) => {
        if (v.feeItemId === this.data.list[i].feeItemId) {
          this.data.list[i].edit = !0
        }
      })
    }
  }

  private formatterMoney (row: any, column: any, cellValue: any) {
    return util.generatingThousandthPer(cellValue)
  }

  private async initData () {
    await getStuDetail({
      id: this.params.id
    }).then((res: any) => {
      if (res.code === 10000) {
        this.data.info = res.object.info
      }
    })
    await getRefundItem({
      stuId: this.params.id
    }).then((res: any) => {
      if (res.code === 10000) {
        this.data.list = res.object.list.map((v: any) => {
          v.feeRefundAmount = ''
          return v
        })
        this.$nextTick(() => {
          this.data.list.forEach((row: any) => {
            row.feeMust && (this.$refs.hsTable as any).toggleRowSelection(row)
          })
        })
      }
    })
  }

  private async refundAlreadyProcessInsert () {
    const params: any = {
      balance: this.totalFeeRefundAmount,
      items: []
    }
    this.selectedRow.map((v: any) => {
      params.items.push({
        stuId: this.data.info.id,
        stuCode: this.data.info.stuCode,
        stuName: this.data.info.stuName,
        business: this.params.business,
        schoolId: this.data.info.schoolId,
        schoolName: this.data.info.schoolName,
        subjectId: this.data.info.subjectId,
        subjectName: this.data.info.subjectName,
        gradeId: this.data.info.gradeId,
        gradeName: this.data.info.gradeName,
        feeStandardCode: v.feeStandardCode,
        feeStandardId: v.feeStandardId,
        feeItemId: v.feeItemId,
        feeItemName: v.feeItemName,
        feeRangeBegin: v.feeRangeBegin,
        feeRangeEnd: v.feeRangeEnd,
        feeMust: v.feeMust,
        acceptedAmount: v.acceptedAmount,
        receivableAmount: v.receivableAmount,
        alreadyReductionAmount: v.alreadyReductionAmount,
        refundAmount: v.refundAmount,
        alreadyRefundAmount: v.alreadyRefundAmount,
        arrearsAmount: v.arrearsAmount,
        balanceAmount: v.balanceAmount
      })
    })
    refundUntreatedVerifyRefund(params).then(async (res: any) => {
      if (res.code === -10000) {
        if (res.message) {
          const message = res.message.replace(/;/g, '</br>')
          this.$alert(message, { type: 'error', dangerouslyUseHTMLString: !0 })
        }
      } else {
        const paramsInsert: any = {
          stuId: this.data.info.id,
          outSchool: this.form.outSchool,
          payRecord: {
            stuId: this.data.info.id,
            stuCode: this.data.info.stuCode,
            stuName: this.data.info.stuName,
            business: this.params.business,
            schoolId: this.data.info.schoolId,
            schoolName: this.data.info.schoolName,
            subjectId: this.data.info.subjectId,
            subjectName: this.data.info.subjectName,
            gradeId: this.data.info.gradeId,
            gradeName: this.data.info.gradeName,
            schoolYear: this.data.info.schoolYear,
            payTime: this.form.payTime.getTime(),
            refundAmount: this.totalRefundAmount * 100,
            remark: this.form.remark,
            accountAmount: '',
            accountPay: '',
            items: []
          }
        }
        this.selectedRow.map((v: any) => {
          paramsInsert.payRecord.items.push({
            stuId: this.data.info.id,
            stuCode: this.data.info.stuCode,
            stuName: this.data.info.stuName,
            business: this.params.business,
            schoolId: this.data.info.schoolId,
            schoolName: this.data.info.schoolName,
            gradeId: this.data.info.gradeId,
            gradeName: this.data.info.gradeName,
            subjectId: this.data.info.subjectId,
            subjectName: this.data.info.subjectName,
            feeStandardId: v.feeStandardId,
            feeStandardCode: v.feeStandardCode,
            feeItemId: v.feeItemId,
            feeItemName: v.feeItemName,
            feeMust: v.feeMust,
            receivableAmount: v.receivableAmount * 100,
            acceptedAmount: v.acceptedAmount * 100,
            alreadyreductionAmount: v.alreadyreductionAmount * 100,
            alreadyRefundAmount: v.alreadyRefundAmount * 100,
            arrearsAmount: v.arrearsAmount * 100
          })
        })
        await refundAlreadyProcessInsert(paramsInsert).then((res: any) => {
          if (res.code === 10000) {
            this.data.info = res.object.info
          }
        })
      }
    })
  }

  private onFund () {
    if (this.form.outSchool !== 0 && this.form.outSchool !== 1) {
      this.$alert('请选择是否退学', { type: 'error' })
      return
    }
    if (this.form.payTime === -1) {
      this.$alert('请选择退费时间', { type: 'error' })
      return
    }
    this.refundAlreadyProcessInsert()
  }

  mounted () {
    this.initData()
  }
}
</script>
<style lang="scss">
  .reduce-container{
    width: calc(100% - 10px);
    height: 100%;
    header{
      width: 100%;
      min-height: 120px;
      display: flex;
      flex-direction: column;
      border-bottom: 1px solid #e4e4e4;
      .line{
        .hs-icon-user{
          font-size: 22px;
          font-weight: bold;
          margin-right: 12px;
          margin-top: 2px;
        }
        .student-name{
          font-size: 20px;
          font-weight: bold;
        }
        width: 100%;
        display: flex;
        margin-bottom: 12px;
      }
    }
    section{
      width: 100%;
      height: calc(100% - 180px);
      .line{
        display: flex;
        align-items: center;
        margin-top: 20px;
        .header-style{
          th {
            background-color: #F5F7FA;
          }
        }
        .hs-icon-question{
          font-size: 16px;
          margin-right: 6px;
        }
        &.auto .static-label{
          font-size: 16px;
          font-weight: bold;
        }
      }
    }
    footer{
      width: 100%;
      display: flex;
      justify-content: center;
    }
  }
</style>
