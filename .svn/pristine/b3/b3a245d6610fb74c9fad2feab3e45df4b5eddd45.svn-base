<template>
  <div class="batchimport-container">
    <header>
      <div class="step-header">
        <span class="title">批量减免</span>
        <el-steps align-center style="width:calc(100% - 300px); margin-bottom: 10px;" :active="active" finish-status="success">
          <el-step title="提交表单"></el-step>
          <el-step title="批量导入"></el-step>
          <el-step title="导入验证"></el-step>
        </el-steps>
        <coverlap></coverlap>
      </div>
      <hs-form ref="form" :model="form" :rules="rules" label-width="98px" :inline="true">
          <hs-form-item label="学习类型" prop="studyId">
          <dict-select :val.sync="form.studyId" comm-group-name="state"></dict-select>
        </hs-form-item>
          <hs-form-item label="院校" prop="school">
          <dict-select :val.sync="form.school" comm-group-name="state"></dict-select>
        </hs-form-item>
          <hs-form-item label="年级" prop="grade">
          <dict-select :val.sync="form.grade" comm-group-name="state"></dict-select>
        </hs-form-item>
          <hs-form-item label="学年" prop="schoolYear">
          <dict-select :val.sync="form.schoolYear" comm-group-name="state"></dict-select>
        </hs-form-item>
          <hs-form-item label="专业" prop="subject">
          <dict-select multiple :collapse-tags="!0" :val.sync="form.subject" comm-group-name="state"></dict-select>
        </hs-form-item>
          <hs-form-item label="收费标准" prop="standard">
          <dict-select multiple :collapse-tags="!0" @change="standardChange" :val.sync="form.standard" :data="standards"></dict-select>
        </hs-form-item>
        <hs-form-item class="query-block">
          <hs-button type="primary" @click="onSubmit" size="mini" icon="hs-icon-upload2">提交</hs-button>
          <hs-button type="default" @click="onReset" size="mini" icon="hs-icon-refresh-right">重置</hs-button>
        </hs-form-item>
      </hs-form>
    </header>
    <section>
      <transition name="el-zoom-in-top">
        <div class="tip" :style="{ height: tipHidden ? '12px' : 'auto' }">
          <i :class="tipHidden ? icon.up : icon.down" @click="tipHidden = !tipHidden"></i>
          <p>操作步骤：收费标准中输入本次减免金额→选择减免时间→点击“批量导入”即可</p>
          <p>如需部分学生批量导入，可通过“选择学生”批量筛选名单</p>
          <p style="color: red;">为了您操作便捷，超过30人以上使用下载模板编辑后再导入</p>
        </div>
      </transition>
      <template v-if="columns.length">
        <hs-button style="float:right;" type="primary" @click="onAddStudent" :disabled="!columns.length" size="mini" icon="hs-icon-plus">选择学生</hs-button>
        <hs-table
          :id="tableId"
          :data="list"
          :border="!0"
          :columns="columns"
          :show-summary="!0"
          :summary-method="getSummaries"
          style="width: 100%"
          header-row-class-name="header-style">
            <hs-table-column type="index" label="序号" header-align="center" align="center" width="50"></hs-table-column>
            <hs-table-column v-for="(column, i) in flexColumns.left" :prop="column.prop" :label="column.label" :key="i"></hs-table-column>
            <hs-table-column v-for="(column, i) in columns" :prop="column.prop" :label="column.label" :key="i">
              <template slot-scope="scope">
                <hs-input style="margin: 1px 0;" v-money size="mini" v-model.trim="list[scope.$index][scope.column.property]"></hs-input>
              </template>
            </hs-table-column>
            <hs-table-column v-for="(column, i) in flexColumns.right" :prop="column.prop" :label="column.label" :key="i"></hs-table-column>
        </hs-table>
        <div class="line">
          <hs-button type="primary" @click="onDownLoadTemplate" size="mini" icon="hs-icon-download">下载模板</hs-button>
          <hs-button type="success" @click="addData" size="mini" icon="hs-icon-plus">选择文件</hs-button>
          <hs-button type="default" @click="onUpload" size="mini" icon="hs-icon-upload">批量导入</hs-button>
        </div>
      </template>
      <template v-else>
        <div class="empty">
          <i class="hs-icon-folder-add" />
          <span>请先填写以上表单</span>
        </div>
      </template>
    </section>
  </div>
</template>

<script lang="ts">
import { Vue, Component, Prop } from 'vue-property-decorator'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import util from '@/utils/busi/util'
import Coverlap from '@/components/busi/coverlap.vue'
import { businessList, businessDetail } from '@/api/base'
@Component({
  name: 'batch-import',
  components: {
    Coverlap,
    DictSelect
  }
})
export default class Batchimport extends Vue {
  @Prop({ type: Object })
  private flexColumns!: object|any

  private form = {}

  private active = 1

  private tableId = `batch-import-${Math.random().toString(36).substr(2, 4) + '-' + Math.random().toString(36).substr(4, 4)}`

  private loading = !1

  private handleNodeClick (data: any) {
    console.log(data)
  }

  private generatingThousandthPer (num: any) {
    return util.generatingThousandthPer(num)
  }

  private formatterMoney (row: any, column: any, cellValue: any) {
    return util.generatingThousandthPer(cellValue)
  }

  private standards = [
    {
      key: 'xf',
      value: '学费_13800元'
    },
    {
      key: 'jnf',
      value: '技能费_13800元'
    }
  ]

  private list: any[] = []

  private rules = {
    studyId: [
      { required: !0, message: '请选择学习类型', trigger: 'change' }
    ],
    school: [
      { required: !0, message: '请选择院校', trigger: 'change' }
    ],
    grade: [
      { required: !0, message: '请选择年级', trigger: 'change' }
    ],
    subject: [
      { required: !0, message: '请选择专业', trigger: 'change' }
    ],
    schoolYear: [
      { required: !0, message: '请选择学年', trigger: 'change' }
    ],
    standard: [
      { required: !0, message: '请选择收费标准', trigger: 'change' }
    ]
  }

  private columns: any = []

  public $refs!: {
    form: any
  };

  private icon = {
    up: 'hs-icon-d-arrow-right',
    down: 'hs-icon-d-arrow-left'
  }

  private onReset () {
    this.form = {}
    this.standardSelecteds = []
    this.list = []
    this.columns = []
  }

  private tipHidden = !1

  private currentPage = 1

  private visible = !1

  private detailData = {}

  private standardSelecteds: any = []

  private async showDetail (row: any) {
    await businessDetail({ id: row.id }).then((res: any) => {
      if (res.code === 10000) {
        this.visible = !0
        this.detailData = {
          businessName: res.object.businessName,
          businessStateName: res.object.stateName,
          memo: res.object.memo
        }
      }
    })
  }

  private getSummaries (param: any) {
    const { columns, data } = param
    const sums: any = []
    columns.forEach((column: any, index: any) => {
      if (index === 0) {
        sums[index] = '合计'
        return
      }
      const values = this.list.map((item: any) => Number(item[column.property]))
      if (!values.every((value: any) => isNaN(value))) {
        sums[index] = values.reduce((prev: any, curr: any) => {
          const value = Number(curr)
          if (!isNaN(value)) {
            return prev + curr
          } else {
            return prev
          }
        }, 0)
      } else {
        sums[index] = '0'
      }
    })
    const start = this.flexColumns.left.length
    const len = this.columns.length
    const index = start + len + 1
    sums[index] = 0
    for (let i = 1; i <= len; i++) {
      sums[index] += sums[start + i] * 1
    }
    return sums.map((v: any) => util.generatingThousandthPer(v || '0'))
  }

  private setColSpan () {
    setTimeout(() => {
      const el = `#${this.tableId}`
      if (this.$el.querySelector(el)) {
        var current = (this.$el as any)
          .querySelector(el)
          .querySelector('.el-table__footer-wrapper')
          .querySelector('.el-table__footer')
        var cell = current.rows[0].cells
        const leftColumns = this.flexColumns.left
        const rightColumns = this.flexColumns.right
        cell[0].colSpan = (leftColumns.length + 1).toString()
        for (let i = 1; i <= leftColumns.length; i++) {
          cell[i].style.display = 'none'
        }
        const start = leftColumns.length + this.columns.length + 1
        if (rightColumns.length > 1) {
          cell[start].colSpan = (rightColumns.length).toString()
          for (let i = 1; i <= rightColumns.length; i++) {
            cell[start + i].style.display = 'none'
          }
        }
      }
    }, 50)
  }

  private onSubmit () {
    this.$refs.form.validate((valid: any) => {
      if (valid) {
        this.$message.error('请输入必填项')
      } else {
        this.initTableData()
      }
    })
  }

  private initTableData () {
    this.columns = [...this.standardSelecteds]
    this.onAddStudent()
    this.setColSpan()
  }

  private onAddStudent () {
    const common: any = {}
    this.standardSelecteds.map((v: any) => {
      common[v.prop] = ''
    })
    this.list.push({
      studentName: '郑斐文',
      stuPaperworkNumber: 'xxxxxxxxxxxxxxxxxxxxxx',
      ...common,
      date: 'date'
    })
  }

  private standardChange (vals: any, labels: any) {
    const len = vals.length
    this.standardSelecteds = []
    for (let i = 0; i < len; i++) {
      this.standardSelecteds.push({
        prop: vals[i],
        label: labels[i]
      })
    }
  }

  private onDownLoadTemplate () {
    // do
  }

  private onAddData () {
    // do
  }

  private onUpload () {
    // do
  }
}
</script>

<style lang="scss">
.batchimport-container{
  height: 100%;
  width: 100%;
  header{
    width: 100%;
    .step-header{
      width: 100%;
      height: 66px;
      position: relative;
      display: flex;
      border-bottom: 1px solid #d6d6d6;
      margin-bottom: 10px;
      .title{
        width: 100px;
        font-size: 22px;
        font-weight: bold;
        margin: 0 20px;
        line-height: 40px;
        text-align: center;
      }
    }
  }
  section{
    .line{
      width: 100%;
      text-align: center;
    }
    width: 100%;
    height: calc(100% - 115px);
    .tip{
      position: relative;
      padding: 8px 16px;
      background-color: #ecf8ff;
      border-radius: 4px;
      border-left: 5px solid #50bfff;
      overflow: hidden;
      i{
        position: absolute;
        border-radius: 50%;
        text-align: center;
        transform: rotate(90deg);
        cursor: pointer;
        font-size: 14px;
        height: 16px;
        width: 16px;
        line-height: 16px;
        vertical-align: middle;
        bottom: 0;
        right: calc(50% - 8px);
        color: #f56c6c;
        &:hover{
          color: #fff;
          background-color: #f56c6c;
        }
      }
      p{
        margin: 6px 0;
      }
    }
    .header-style{
      th {
        background-color: #F5F7FA;
      }
    }
    .empty{
      width: 100%;
      height: calc(100% - 90px);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      i{
        font-size: 60px;
        color: #e6e6e6;
      }
    }
  }
}
</style>
