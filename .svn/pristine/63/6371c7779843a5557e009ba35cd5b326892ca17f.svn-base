<template>
  <div class="noticecatalogmanage-container">
    <header>
      <hs-form ref="form" :model="form" label-width="108px" :inline="true">
        <hs-form-item label="栏目名称">
          <hs-input size="mini" v-model="form.name" placeholder="请输入栏目名称" ></hs-input>
        </hs-form-item>
        <hs-form-item label="状态">
          <dict-select :val.sync="form.state" comm-group-name="state"></dict-select>
        </hs-form-item>
        <hs-form-item>
          <hs-button type="primary" @click="onQuery" size="mini" icon="hs-icon-search">查询</hs-button>
          <hs-button type="default" @click="onReset" size="mini" icon="hs-icon-refresh-right">重置</hs-button>
        </hs-form-item>
      </hs-form>
      <div class="action-bolck">
          <hs-button type="primary" @click="onAdd" v-permission="['noticeCatalogAdd']" icon="hs-icon-plus" size="mini">新增</hs-button>
          <hs-button type="danger" @click="onRemove" v-permission="['noticeCatalogDel']" icon="hs-icon-minus" size="mini">删除</hs-button>
      </div>
    </header>
    <section>
      <simple-table :index="!0" :isCheckbox="!0" :data="tableData" :columns="columns" @selection-change="selectionChange" :loading="loading" @query="onQuery" :pagination.sync="pagination" @row-dbclick="showDetail" :dicts="['state']">
        <template slot="custom_state" slot-scope="{ scope }">
          <hs-switch
            v-permission="['noticeCatalogDisable', 'noticeCatalogEable']"
            v-model="scope.row.state"
            :active-value="1"
            :inactive-value="0"
            @change="change(scope.row)"
            active-color="#13ce66"
            inactive-color="#d9d9d9">
          </hs-switch>
        </template>
        <template slot="operator" slot-scope="{ scope }">
          <hs-button
            v-permission="['noticeCatalogEdit']"
            @click.native.prevent="onEdit(scope.row)"
            type="text"
            size="small">
            编辑
          </hs-button>
          <hs-button
            @click.native.prevent="showDetail(scope.row)"
            type="text"
            size="small">
            详情
          </hs-button>
        </template>
      </simple-table>
    </section>
    <detail-dialog title="详情" :data="datailData" :visible.sync="visible" ></detail-dialog>
  </div>
</template>

<script lang="ts">
import { Vue, Component } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import DetailDialog from '@/components/busi/table/detail.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import util from '@/utils/busi/util'
import { MessageBox } from 'element-ui'
import { catalogList, catalogCount, catalogDetail, addCatalog, removeCatalog, updateCatalog, enableCatalog, disableCatalog } from '@/api/notice'
@Component({
  name: 'notice-catalog-manage',
  components: {
    SimpleTable,
    DetailDialog,
    DictSelect
  }
})
export default class NoticeCatalogManage extends Vue {
  private form = {
    gradeState: 1
  }

  private loading = !1

  private tableData = {
    list: [],
    totalCount: 0
  }

  private columns = [{
    prop: 'name',
    label: '栏目名称'
  },
  {
    prop: 'memo',
    label: '备注'
  },
  {
    prop: 'state',
    label: '状态',
    custom: !0
  },
  {
    prop: 'createTime',
    label: '创建时间'
  }]

  private pagination: any = {
    currentPage: 1,
    pageSize: 10
  }

  private async onQuery (pagination: any = null) {
    // do something
    this.loading = !0
    const form = util.trimForm({ ...this.form }, this.columns)
    !pagination && (this.pagination.currentPage = 1)
    await catalogList({
      ...form,
      ...pagination || this.pagination
    }).then(async (res: any) => {
      await catalogCount({
        ...form
      }).then((resCnt: any) => {
        this.loading = !1
        this.tableData.list = res.object.list
        this.tableData.totalCount = resCnt.object.totalCount
      }).catch((err: any) => {
        console.log('err', err)
        this.loading = !1
      })
    }).catch((err: any) => {
      console.log('err', err)
      this.loading = !1
    })
  }

  private onReset () {
    this.form = {
      gradeState: 1
    }
    this.onQuery()
  }

  private visible = !1

  private selectedRow: any[] = []

  private selectionChange (selected: any) {
    this.selectedRow = selected
  }

  private async onRemove () {
    // 删除
    if (!this.selectedRow || this.selectedRow.length === 0) {
      this.$alert('请选择栏目')
      return
    }
    const ids = this.selectedRow.map((v: any) => v.id)
    MessageBox.confirm(
      '提示：是否删除所选栏目', '删除', {
        confirmButtonText: '确定',
        cancelButtonText: '取消'
      }).then(async () => {
      await removeCatalog({
        ids: ids.join(',')
      }).then((res: any) => {
        if (res.code === 10000) {
          this.$message(res.message)
        }
      })
    })
  }

  private datailData = {}

  private async change (row: any) {
    if (row.schoolState === 1) {
      if (!row.detailId) {
        this.$alert('请先配置数据!')
        row.schoolState = 0
      } else {
        await enableCatalog({ id: row.detailId })
      }
    } else {
      await disableCatalog({ id: row.detailId })
    }
  }

  private async showDetail (row: any) {
    await catalogDetail({ id: row.id }).then((res: any) => {
      if (res.code === 10000) {
        this.visible = !0
        this.datailData = {
          gradeCode: res.object.gradeCode,
          gradeName: res.object.gradeName,
          gradeState: res.object.gradeState
        }
      }
    })
  }

  private async onEdit (row: any) {
    await catalogDetail({ id: row.id }).then((res: any) => {
      if (res.code === 10000) {
        this.datailData = {
          gradeCode: res.object.gradeCode,
          gradeName: res.object.gradeName,
          gradeState: res.object.gradeState
        }
      }
    })
  }

  private onAdd () {
    // do
  }

  mounted () {
    this.onQuery()
  }
}
</script>

<style lang="scss" scoped>
@import "./index";
</style>
