<template>
  <div class="flex">
    <div class="left">
      <drawer-select :data="businessList" :value.sync="curBusiness"></drawer-select>
    </div>
    <div class="right collectmanageauth-container">
        <!-- header -->
        <div class="align-between">
          <span class="f20">学生收费</span>
          <hs-tabs v-model="activeName" type="card">
            <hs-tab-pane label="待处理" name="undeal"></hs-tab-pane>
            <hs-tab-pane label="已处理" name="dealed"></hs-tab-pane>
          </hs-tabs>
        </div>
        <!-- header end -->
        <!-- form -->
        <hs-form ref="form" :model="form" label-width="98px" :inline="true">
          <hs-form-item label="院校">
            <dict-select ref="school" @change="schoolChange" :option="options.school" :prop="{ key: 'id', value: 'schoolName' }" :val.sync="form.schoolId" clearable ></dict-select>
          </hs-form-item>
          <hs-form-item label="年级">
            <dict-select ref="grade" @change="gradeChange" :option="options.grade" :prop="{ key: 'id', value: 'gradeName' }" :val.sync="form.gradeId" clearable ></dict-select>
          </hs-form-item>
          <hs-form-item label="专业">
            <dict-select ref="subject" @change="subjectChange" :option="options.subject" :prop="{ key: 'id', value: 'subjectName' }" :val.sync="form.subjectId" clearable ></dict-select>
          </hs-form-item>
          <hs-form-item label="学生姓名">
            <hs-input size="mini" v-model="form.stuName" placeholder="请输入学生姓名" clearable></hs-input>
          </hs-form-item>
          <hs-form-item label="助记码">
            <hs-input size="mini" v-model="form.mnemonicCode" placeholder="请输入助记码" clearable></hs-input>
          </hs-form-item>
          <hs-form-item label="身份证号">
            <hs-input size="mini" v-model="form.idCard" placeholder="请输入身份证号" clearable></hs-input>
          </hs-form-item>
          <hs-form-item label="学籍状态">
            <dict-select :val.sync="form.schoolRollStatus" constant-group-name="schoolRollStatus" clearable></dict-select>
          </hs-form-item>
          <hs-form-item label="操作人" v-if="isDealed">
            <hs-input size="mini" v-model="form.createName" placeholder="请输入操作人" ></hs-input>
          </hs-form-item>
          <hs-form-item label="缴费时间" v-if="isDealed">
            <el-date-picker
              range-separator="至"
              value-format="timestamp"
              start-placeholder="开始日期"
              end-placeholder="结束日期"
              :picker-options="pickerOptions"
              type="daterange"
              format="yyyy-MM-dd HH:mm"
              :default-time="['00:00:00','23:59:59']"
              v-model="form.payTime"
              @change="payTimeChange"
              size="mini">
            </el-date-picker>
          </hs-form-item>
          <hs-form-item label="创建时间" v-if="isDealed">
            <el-date-picker
              range-separator="至"
              value-format="timestamp"
              start-placeholder="开始日期"
              end-placeholder="结束日期"
              :picker-options="pickerOptions"
              type="daterange"
              format="yyyy-MM-dd HH:mm"
              :default-time="['00:00:00','23:59:59']"
              v-model="form.createTime"
              @change="createTimeChange"
              size="mini">
            </el-date-picker>
          </hs-form-item>

          <hs-form-item label="流水号" v-if="isDealed">
            <hs-input size="mini" v-model="form.billNo" placeholder="请输入流水号" clearable></hs-input>
          </hs-form-item>
          <hs-form-item label="流水状态" v-if="isDealed">
            <!-- <dict-select :val.sync="form.orderStatus" constant-group-name="status"></dict-select> -->
          </hs-form-item>

          <hs-form-item label="学习类型">
            <dict-select ref="study" @change="studyChange" :option="options.study" :prop="{ key: 'id', value: 'studyName' }" :val.sync="form.study"></dict-select>
          </hs-form-item>
          <hs-form-item label="所属中心">
            <dict-select ref="center" @change="centerChange" :option="options.center" :prop="{ key: 'id', value: 'centerName' }" :val.sync="form.stuBelongCenter"></dict-select>
          </hs-form-item>
          <hs-form-item label="学生来源" v-if="!isDealed">
            <el-cascader :show-all-levels="!1" size="mini" v-model="form.stuSource" :props="{ emitPath: !1, checkStrictly: !1, label: 'optionValue', value: 'optionKey' }" :options="stuSourceData"></el-cascader>
          </hs-form-item>

          <hs-form-item class="query-block">
            <hs-button type="primary" @click="onQuery" size="mini" icon="hs-icon-search">查询</hs-button>
            <hs-button type="default" @click="onReset" size="mini" icon="hs-icon-refresh-right">重置</hs-button>
          </hs-form-item>
        </hs-form>
          <!-- form end -->
          <!-- table -->
          <section>
            <simple-table @selection-change="handleSelectionChange"
            v-show="!isDealed" :isCheckbox="true" :data="tableData" :columns="undealColumns" :loading="loading" @query="onQuery" :pagination.sync="pagination" @row-dbclick="add" :dicts="['stuSex','schoolRollStatus']">
              <template slot="operator" slot-scope="{ scope }">
                <hs-button
                  @click.native.prevent="add(scope.row)"
                  type="text"
                  size="small">
                  收费
                </hs-button>
              </template>
              <template slot="action">
                <hs-button type="primary" icon="hs-icon-plus" @click="batchCollect" size="mini">批量收费</hs-button>
              </template>
            </simple-table>
            <simple-table :operator="{ width: 120 }" @selection-change="handleSelectionChange"
             v-show="isDealed" :isCheckbox="true" :data="tableData" :columns="dealedColumns" :loading="loading" @query="onQuery" :pagination.sync="pagination" @row-dbclick="view"  :dicts="['status']">
              <template slot="custom_payType" slot-scope="{ scope }">
                {{ initPayType(scope.row.payType) }}
              </template>
              <template slot="operator" slot-scope="{ scope }" >
                  <hs-button
                    @click.native.prevent="view(scope.row)"
                    type="text"
                    size="small">
                    查看
                  </hs-button>
                  <hs-button
                    @click.native.prevent="edit(scope.row)"
                    type="text"
                    size="small">
                    编辑
                  </hs-button>
              </template>
              <template slot="action">
                <hs-button type="danger" v-permission="['fcsFullColProcessedInvalid']"  :disabled="selectList.length===0" icon="hs-icon-close" @click="onInvalid" size="mini" >作废</hs-button>
                <hs-button type="primary"  icon="hs-icon-download" @click="onExport" size="mini" >导出</hs-button>
                <hs-button type="primary" v-permission="['fcsFeePrint']"  :disabled="selectList.length!==1" icon="hs-icon-tickets" @click="onPrint" size="mini" >打印</hs-button>
                <hs-button type="primary" v-permission="['fcsOpenInvoice']" :disabled="selectList.length===0" icon="hs-icon-c-scale-to-original" @click="onOpen" size="mini" >开票</hs-button>
              </template>
            </simple-table>
          </section>
          <!-- table -->
      </div>
      <!-- print -->
      <print-receipt
        :receiptVisible="receiptVisible"
        :handleClose="receiptClose"
        :collectFeesCode="turnoverID"
        @callback="receiptClose"
      />
      <!-- print -->
  </div>
</template>

<script lang="ts">
import { Vue, Component, Watch } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import DetailDialog from '@/components/busi/table/detail.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import DrawerSelect from '@/components/busi/drawerselect.vue'
import util from '@/utils/busi/util'
import PrintReceipt from '@/components/PrintReceipt/index.vue'// 打印小票
import { commonApi, getList } from '@/api/common'
import { collectApi } from '@/api/collect'
import { isEmpty } from 'xe-utils'
import { getConstantDict } from '@/utils/common'
import { getConstantByGroup } from '@/utils/dicts/constdict'
import { LocalStorage } from '@/utils/storage'
@Component({
  name: 'collect-manage',
  components: {
    SimpleTable,
    DetailDialog,
    DictSelect,
    DrawerSelect,
    PrintReceipt
  }
})
export default class collectManage extends Vue {
  private loading = false
  private form: any = {
    studyId: '',
    businessId: 1,
    createTime: '',
    createStartTime: '',
    createEndTime: '',
    payTime: '',
    payStartTime: '',
    payEndTime: ''
  }

  // 业务ID
  private businessList: any = []
  private curBusiness = {
    key: '',
    value: ''
  }

   private stuSourceData: any = []

  // 多选数据
  private selectList:any = []

  private activeName = 'undeal'
  get isDealed () {
    return this.activeName === 'dealed'
  }

  // tab监听
  @Watch('activeName')
  private activeNameChange () {
    if (this.isDealed) {
      util.initFlexFormOption.max = 10
    } else {
      util.initFlexFormOption.max = 7
    }
    util.statusChange('extend')
    this.tableData = {
      list: [],
      totalCount: 0
    }
    this.onReset()
  }

  // ----------------------------表格相关 start
  private tableData = {
    list: [],
    totalCount: 0
  }

  // 待处理列表
  private undealColumns = [
    {
      prop: 'stuName',
      label: '学生姓名'
    },
    {
      prop: 'stuSex',
      label: '性别'
    },
    {
      prop: 'studyName',
      label: '学习类型'
    },
    {
      prop: 'schoolName',
      label: '院校名称'
    },
    {
      prop: 'gradeName',
      label: '年级'
    },
    {
      prop: 'subjectName',
      label: '专业名称'
    },
    {
      prop: 'idCard',
      label: '证件后6位'
    },
    {
      prop: 'schoolRollStatus',
      label: '学籍状态'
    }
  ]

  // 支付类型
  private payTypes: any = {}
  private initPayType (payType: any) {
    return payType ? payType.split('|').map((v: any) => this.payTypes[v]).join('|') : ''
  }

  // 已处理列表
  private dealedColumns = [
    {
      prop: 'billNo',
      label: '流水号'
    },
    {
      prop: 'stuName',
      label: '学生姓名'
    },
    {
      prop: 'studyName',
      label: '学习类型'
    },
    {
      prop: 'schoolName',
      label: '院校名称'
    },
    {
      prop: 'gradeName',
      label: '年级'
    },
    {
      prop: 'subjectName',
      label: '专业名称'
    },
    {
      prop: 'receivableAmount',
      label: '本次应收',
      format: 'money'
    },
    {
      prop: 'payAmount',
      label: '本次收费',
      format: 'money'
    },
    {
      prop: 'arrearsAmount',
      label: '本次欠费',
      format: 'money'
    },
    {
      prop: 'accountAmount',
      label: '本次产生余额',
      format: 'money'
    },
    {
      prop: 'payType',
      label: '付款方式',
      custom: !0
    },
    {
      prop: 'createName',
      label: '操作人'
    },
    {
      prop: 'payTime',
      label: '缴费时间',
      format: 'date'
    },
    {
      prop: 'createTime',
      label: '创建时间',
      format: 'date'
    },
    {
      prop: 'status',
      label: '状态'
    },
    {
      prop: 'printNum',
      label: '打印次数'
    },
    {
      prop: 'openInvoice',
      label: '开票'
    }
  ]
  // ----------------------------表格相关 end

  // 院校专业年级等联动
  private options: any = {
    study: {
      url: '/fcs/study/getStudySelect',
      data: {}
    },
    school: {
      url: '/fcs/school/getSchoolSelect',
      data: {}
    },
    grade: {
      url: '/fcs/grade/getGradeSelect',
      data: {}
    },
    subject: {
      url: '/fcs/subject/getSubjectSelect',
      data: {}
    },
    center: {
      url: '/fcs/center/getCenterSelect',
      data: {}
    }
  }

  private pagination: any = { currentPage: '1', pageSize: '10' }
  // 查询
  private async onQuery () {
    this.loading = true
    const form = util.trimForm({ ...this.form })
    if (this.isDealed) { // 已处理
      if (isEmpty(this.payTypes)) {
        const payType = await getConstantDict('payType')
        payType.map((v: any) => {
          this.payTypes[v.key] = v.value
        })
      }
      await collectApi('ftPayList', { ...form, ...this.pagination }).then(async (res: any) => {
        this.loading = false
        this.tableData.list = res.object.list.map((v: any) => {
          v.studyName = v.stuStudyName
          return v
        })
        this.tableData.totalCount = res.object.totalCount
      }).catch((err: any) => {
        console.log('err', err)
        this.loading = false
      })
    } else { // 待处理
      await collectApi('unPayList', { ...form, ...this.pagination }).then(async (res: any) => {
        this.loading = false
        this.tableData.list = res.object.list.map((v: any) => {
          v.idCard = (v.idCard.length > 17) ? v.idCard.substring(v.idCard.length - 6, v.idCard.length) : v.idCard
          return v
        })
        this.tableData.totalCount = res.object.totalCount
      }).catch((err: any) => {
        console.log('err', err)
        this.loading = false
      })
    }
    this.loading = false
  }

  // 创建时间
  private createTimeChange () {
    this.form.createStartTime = this.form.createTime ? this.form.createTime[0] : ''
    this.form.createEndTime = this.form.createTime ? this.form.createTime[1] : ''
  }

  // 缴费时间
  private payTimeChange () {
    this.form.payStartTime = this.form.payTime ? this.form.payTime[0] : ''
    this.form.payEndTime = this.form.payTime ? this.form.payTime[1] : ''
  }

  // 重置
  private onReset () {
    this.form = {
      studyId: '',
      businessId: 1,
      createTime: '',
      createStartTime: '',
      createEndTime: '',
      payTime: '',
      payStartTime: '',
      payEndTime: ''
    }
    this.options.school.data.studyId = this.form.studyId
    this.options.grade.data.schoolId = this.form.schoolId
    this.options.subject.data.schoolId = this.form.schoolId;
    (this.$refs.school as any).getList();
    (this.$refs.grade as any).getList();
    (this.$refs.subject as any).getList()
    this.pagination = {
      currentPage: 1,
      pageSize: 10
    }
    this.onQuery()
  }

  private studyChange () {
    this.options.school.data.studyId = this.form.studyId || null;
    (this.$refs.school as any).getList()
  }

  private schoolChange () {
    this.options.grade.data.schoolId = this.form.schoolId || null
    this.options.subject.data.schoolId = this.form.schoolId || null;
    (this.$refs.grade as any).getList()
    this.getSubjectItem()
  }

  // 多选
  private handleSelectionChange (selection:any) {
    this.selectList = selection
  }

  private turnoverID = '' // 流水ID
  // 打印小票显示
  private receiptVisible = false
  // 打印小票相关
  private receiptClose () { this.receiptVisible = false }
  private visible = false
  private onPrint () {
    this.receiptVisible = true
    this.turnoverID = this.selectList[0].payRecordId
  }

  // 作废
  private async onInvalid () {
    const ids = this.selectList.map((v: any) => v.payRecordId)
    await collectApi('ftPayInvalid', ids).then((res:any) => {
      if (res.code === 10000) {
        this.$message.success('作废成功')
      } else {
        this.$message.error(res.message)
      }
    })
    this.onQuery()
  }

  //  开票
  private async onOpen () {
    const ids = this.selectList.map((v: any) => v.payRecordId)
    await commonApi('openInvoice', ids).then((res:any) => {
      if (res.code === 10000) {
        this.$message.success('开票成功')
      } else {
        this.$message.error(res.message)
      }
    })
    this.onQuery()
  }

  // 导出
  private async onExport () {
    const menuName = LocalStorage.getObj('menu-name')
    this.$confirm('确认要导出' + menuName + '数据?', '提示', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }).then(async () => {
      const columnKeys:any = []
      this.dealedColumns.forEach((item:any) => {
        if (!item.hidden) {
          columnKeys.push(item.prop)
        }
      })
      const { data, headers } = await collectApi('preProcessedExportList', { businessId: 1, columnKeys })
      if (!data) {
        return
      }
      util.exportData(data, menuName + '数据.' + headers['content-file-suffix'])
      this.$message({
        type: 'success',
        message: '导出成功!'
      })
    }).catch(() => { console.log('catch error') })
  }

  // 批量收费
  private batchCollect () {
    this.$router.push({
      name: 'collectbatchimport',
      params: Object.assign({ businessId: this.curBusiness.key })
    },
    () => {
      // do
      this.loading = !1
    })
  }

  // 新增操作
  private async add (row: any) {
    this.$router.push(
      { name: 'collectmanagedetail', params: { info: row, type: 'add' } },
      () => { this.loading = false })
  }

  // 修改操作
  private async edit (row: any) {
    this.$router.push(
      { name: 'collectmanagedetail', params: { info: row, type: 'edit' } },
      () => { this.loading = false })
  }

  // 查看操作
  private async view (row: any) {
    this.$router.push(
      { name: 'collectmanagedetail', params: { info: row, type: 'view' } },
      () => { this.loading = false })
  }

  private constrantArray: any = {
    businessType: [],
    subjectLen: [],
    subjectDegree: []
  }

  private async getConstrantList () {
    this.constrantArray.businessType = await getConstantByGroup('businessType')
    this.constrantArray.subjectLen = await getConstantByGroup('subjectLen')
    this.constrantArray.subjectDegree = await getConstantByGroup('subjectDegree')
  }

  private getValueByConstrantArray (groupName: string, key: any) {
    const dict: any[] = this.constrantArray[groupName]
    const valuedict = dict.filter((v: any) => v.key === key)
    return valuedict.length > 0 ? valuedict[0].value : key
  }

  private subjectItemData: any = []
  private async getSubjectItem () {
    await getList({
      url: this.options.subject.url,
      data: {
        schoolId: this.form.schoolId || null
      }
    }).then((res: any) => {
      if (res.code === 10000) {
        this.subjectItemData = []
        res.object.list.map((v: any) => {
          v.dataKey = `${v.id}-${v.subjectCode}-${v.subjectName}`
          v.showValue = `[${this.getValueByConstrantArray('subjectDegree', Number(v.degree))}]${v.subjectName}[${this.getValueByConstrantArray('subjectLen', Number(v.len))}年]`
          this.subjectItemData.push(v)
        })
      }
    })
  }

  private stuSourceDict: any = []
  private async initData () {
    this.businessList = await getConstantByGroup('businessType', { update: !0 })
    await this.getConstrantList()
    await this.getSubjectItem()
    this.curBusiness = this.businessList[0]
    await commonApi('studentSourceTree').then((res: any) => {
      if (res.code === 10000) {
        this.stuSourceData = res.object.list
      }
    })
    this.stuSourceDict = await getConstantByGroup('stuSource', { update: !0 })
    await this.onQuery()
  }

  mounted () {
    this.initData()
    util.initFlexForm({ max: 7 }) // 最多显示多少个下拉选择
  }
}
</script>

<style lang="scss" scoped>
@import "./index";
@import "../collect";

::v-deep .el-tabs__nav {
  float: right;
}
</style>
