<!-- 列表详情弹窗 -->
<template>
  <hs-dialog title="内容新增" custom-class="notice-catalog-dialog" :visible.sync="visibleSync" width="60%" @close="onClose" :close-on-click-modal="!1" @open="open" >
    <div class="notice-catalog-container">
      <hs-form ref="form" :rules="rules" :model="form" label-width="98px" :inline="true" class="border-style">
        <hs-form-item label="标题名称" prop="catalogTitle">
          <hs-input size="mini" v-model="form.catalogTitle" placeholder="请输入标题名称" ></hs-input>
        </hs-form-item>
        <hs-form-item label="信息来源" prop="source" class="line">
          <hs-input size="mini" v-model="form.source" placeholder="请输入信息来源" ></hs-input>
        </hs-form-item>
        <hs-form-item label="内容" prop="catalogContent" class="area line">
          <tinymce
            v-model="form.catalogContent"
            :height="400"
            @images-upload-handler="imagesUploadHandler"
          />
        </hs-form-item>
        <hs-form-item label="附件" class="multi line">
          <multi-file-upload ref="multiUpload" :loadData.sync="loadData"></multi-file-upload>
        </hs-form-item>
        <hs-form-item label="置顶" prop="top" class="line">
          <dict-select :val.sync="form.top" constant-group-name="yesOrNo"></dict-select>
        </hs-form-item>
        <hs-form-item label="发布" prop="open" class="line">
          <dict-select :val.sync="form.open" constant-group-name="yesOrNo"></dict-select>
        </hs-form-item>
      </hs-form>
    </div>
    <span slot="footer" class="dialog-footer">
      <hs-button type="primary" @click="onSave">确认</hs-button>
      <hs-button type="default" @click="visibleSync = !1">关闭</hs-button>
    </span>
  </hs-dialog>
</template>

<script lang="ts">

import { Component, Prop, PropSync, Vue } from 'vue-property-decorator'
import { settingApi } from '@/api/settingmanage'
import setting from '@/settings'
import Tinymce from '@/components/Tinymce/index.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import MultiFileUpload from '@/components/busi/custom/multifileupload.vue'

@Component({
  name: 'add-dialog',
  components: {
    DictSelect,
    MultiFileUpload,
    Tinymce
  }
})

export default class AddDialog extends Vue {
  @PropSync('visible', { type: Boolean, default: !1 })
  private visibleSync!: boolean

  @Prop({ type: Object })
  private data!: object|any

  private form = {
    id: '',
    catalogTitle: '',
    source: '',
    catalogContent: '',
    top: '',
    open: '',
    atts: []
  }

  private loadData: any = []

  private rules = {
    catalogTitle: [
      { required: true, message: '请输入标题名称', trigger: 'blur' }
    ],
    source: [
      { required: true, message: '请输入消息来源', trigger: 'blur' }
    ],
    catalogContent: [
      { required: true, message: '请输入内容', trigger: 'blur' }
    ],
    top: [
      { required: true, message: '请选择是否指定', trigger: 'blur' }
    ],
    open: [
      { required: true, message: '请选择是否发布', trigger: 'blur' }
    ]
  }

  private onSave () {
    this.form.atts = (this.$refs.multiUpload as any).datas.filter((v: any) => v.status === 5).map((item: any) => {
      return {
        originalName: item.originalFileName,
        currentName: item.newFileName,
        path: item.savePath,
        size: item.fileSize,
        suffixName: item.fileSuffix
      }
    });
    (this.$refs.form as any).validate(async (validate: any) => {
      if (!validate) return
      const data = this.data.type === 'add' ? {
        catalogTitle: this.form.catalogTitle,
        source: this.form.source,
        catalogContent: this.form.catalogContent,
        top: this.form.top,
        open: this.form.open,
        atts: this.form.atts,
        catalogId: this.data.catalogId
      } : {
        id: this.form.id,
        catalogTitle: this.form.catalogTitle,
        source: this.form.source,
        catalogContent: this.form.catalogContent,
        top: this.form.top,
        atts: this.form.atts,
        catalogId: this.data.catalogId
      }
      if (this.data.type === 'add') {
        await settingApi('addNotice', data).then((res: any) => {
          if (res.code === 10000) {
            this.$message.success(res.message)
            this.visibleSync = !1
            this.$listeners['save-back'] && this.$emit('save-back')
          } else if (res.code === -10000) {
            this.$alert(res.message, { type: 'error' })
          }
        })
      } else {
        await settingApi('updateNotice', data).then((res: any) => {
          if (res.code === 10000) {
            this.$message.success(res.message)
            this.visibleSync = !1
            this.$listeners['save-back'] && this.$emit('save-back')
          } else if (res.code === -10000) {
            this.$alert(res.message, { type: 'error' })
          }
        })
      }
    })
  }

  private async imagesUploadHandler (blobInfo: any, succFun: any, failFun: any) {
    var formData: any = new FormData()
    formData.append('parentFolder', 'lb/schoolDetail')
    formData.append('file', blobInfo.blob(), blobInfo.filename())
    await settingApi('fileUploadPost', formData).then((res: any) => {
      if (res.success) {
        const path = setting.ossIp + '/' + res.fileInfos[0].savePath
        succFun(path)
      } else {
        failFun()
      }
    })
  }

  private open () {
    if (this.data.type === 'add') {
      this.form = {
        id: '',
        catalogTitle: '',
        source: '',
        catalogContent: '',
        top: '',
        open: '',
        atts: []
      }
    } else {
      this.form = Object.assign(this.form, this.data)
      this.loadData = this.data.atts.map((item: any) => {
        return {
          originalFileName: item.originalName,
          newFileName: item.currentName,
          savePath: item.path,
          fileSize: item.size,
          fileSuffix: item.suffixName,
          name: item.originalName,
          status: 5,
          id: item.id
        }
      });
      (this.$refs.multiUpload as any).datas = this.data.atts.map((item: any) => {
        return {
          originalFileName: item.originalName,
          newFileName: item.currentName,
          savePath: item.path,
          fileSize: item.size,
          fileSuffix: item.suffixName,
          name: item.originalName,
          status: 5,
          id: item.id
        }
      })
    }
  }

  private onClose () {
    (this.$refs.multiUpload as any).clear()
  }
}
</script>
<style lang="scss">
.notice-catalog-dialog{
  min-width: 650px;
  .hs-dialog__body{
    overflow: auto;
    padding: 10px;
    .notice-catalog-container{
      width: 100%;
      min-width: 600px;
      height: 100%;
      display: flex;
      flex-direction: column;
    }
  }
}
</style>
