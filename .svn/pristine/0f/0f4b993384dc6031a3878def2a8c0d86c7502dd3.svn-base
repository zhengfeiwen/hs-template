<template>
<div>
        <div class="detail-line">
          <div v-if="params.type === 'view'" class="mb30">
              <div  class="line user-info-box" style="margin-left:50px;">
                <div class="w25p">流水号：{{ viewInfo.billNo }}</div>
                <div class="w30p">创建时间：{{ viewInfo.createTime ? dayjs(viewInfo.createTime).format('YYYY-MM-DD HH:mm') : '' }}</div>
                <div class="w20p">流水状态：
                <span class="deep-green" v-if="viewInfo.status === 1">正常</span>
                <span  class="red" v-else-if="viewInfo.status === 2">作废</span>
                <span class="red" v-else>{{ viewInfo.status }}</span>
                </div>
                <div class="w20p">操作人:{{ viewInfo.createName }}</div>
            </div>
            <div  class="line user-info-box" style="margin-left:50px;">
                <div class="w25p">缴费时间：{{ viewInfo.payTime ? dayjs(viewInfo.payTime).format('YYYY-MM-DD HH:mm') : '' }}</div>
                <div class="w30p">缴费类型：{{ viewInfo.tradeType }}</div>
            </div>
          </div>
            <div class="f20" v-if="params.type === 'add'" >分配金额</div>
            <header class="mt10">
              <hs-form v-if="params.type !== 'view'" ref="form" :model="form" label-width="98px" :inline="true">
                  <hs-form-item label="学年">
                    <dict-select :isInit="!0" :disabled="params.type !== 'add'" @change="schoolYearChange" :val.sync="form.schoolYear" constant-group-name="schoolYear"></dict-select>
                  </hs-form-item>
                  <hs-form-item label="缴费时间">
                    <el-date-picker
                      v-model="form.payTime"
                      value-format="timestamp"
                      type="datetime"
                      format="yyyy-MM-dd HH:mm"
                      size="mini"
                      :picker-options="pickerOptions"
                      :disabled="params.type === 'view'"
                      placeholder="选择日期时间">
                    </el-date-picker>
                  </hs-form-item>
              </hs-form>
            </header>
        <hs-table id="feeTable"
          :empty-text="emptyText"
        ref="feeTable" :data="list" :border="true" :show-summary="true"
        @select-all="selectAllFun"
        @select="selectedSimple"
        @selection-change="selectionChange"
        :summary-method="getSummaries"
            style="width: 100%" header-row-class-name="header-style">
            <el-table-column v-if="params.type === 'add'" align="center"  type="selection" width="55" :selectable="selectInit" ></el-table-column>
             <hs-table-column v-if="params.type !== 'add'" prop="business" label="缴费业务">
              <template slot-scope="scope">
                <span>{{ dictBusiness(scope.row.business) }}</span>
              </template>
            </hs-table-column>
          <hs-table-column v-if="params.type !== 'add'" prop="schoolName" label="缴费院校"></hs-table-column>
          <hs-table-column v-if="params.type !== 'add'" prop="gradeName" label="缴费年级"></hs-table-column>
          <hs-table-column v-if="params.type !== 'add'" prop="schoolYear" label="学年">
            <template slot-scope="scope">
              {{ schoolYearName(scope.row.schoolYear) }}
            </template>
          </hs-table-column>
            <hs-table-column prop="feeItemName" label="收费项目"></hs-table-column>
            <hs-table-column prop="ifMust" label="必缴">
              <template slot-scope="scope">
                  {{ scope.row.ifMust === 1 ? '是' : '否' }}
                </template>
            </hs-table-column>
            <hs-table-column prop="receivableMoney" label="应收"></hs-table-column>
            <hs-table-column prop="reduceMoney" :formatter="formatterMoney" label="已减免"></hs-table-column>
            <hs-table-column prop="refundMoney" label="已退"></hs-table-column>
            <hs-table-column prop="feesMoney" label="已收"></hs-table-column>
            <hs-table-column prop="feesCharge" label="本次收费">
            <template slot-scope="scope">
              <span v-if="!list[scope.$index].edit || params.type !== 'add'">{{ list[scope.$index].feesCharge }}</span>
              <hs-input @input="feesChargeChange($event,scope.$index)" v-else v-money size="mini" v-model.trim="list[scope.$index].feesCharge"></hs-input>
            </template>
            </hs-table-column>
            <el-table-column prop="deptType" label="本次欠费">
              <template slot-scope="scope">
                  <span>{{ CurrentOweFee(scope.row) || 0 }}</span>
              </template>
          </el-table-column>
        </hs-table>

        <div class="f20 mt20 mb20">收款方式 <span class="f12 ml10 red" v-if="params.type === 'add'">双击收费方式可快捷收费</span> </div>
        <el-table
        :key="stuBalance"
        :data="payData" style="width: 100%" :border="true" @header-click="expressCharge">
            <el-table-column align="center" prop="cash" label="现金">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].cash"></hs-input>
                <span v-else>{{payData[scope.$index].cash}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="brushCard" label="刷卡">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'"  v-money size="mini" v-model.trim="payData[scope.$index].brushCard"></hs-input>
                <span v-else>{{payData[scope.$index].brushCard}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="transferMoney" label="转账">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].transferMoney"></hs-input>
                <span v-else>{{payData[scope.$index].transferMoney}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="aliPay" label="支付宝">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'"  v-money size="mini" v-model.trim="payData[scope.$index].aliPay"></hs-input>
                <span v-else>{{payData[scope.$index].aliPay}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="wechatPay" label="微信">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].wechatPay"></hs-input>
                <span v-else>{{payData[scope.$index].wechatPay}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="oneCodePay" label="一码通">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].oneCodePay"></hs-input>
                <span v-else>{{payData[scope.$index].oneCodePay}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="payPlatform" label="缴平台">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].payPlatform"></hs-input>
                <span v-else>{{payData[scope.$index].payPlatform}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="xtPay" label="秀推">
              <template slot-scope="scope">
                <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].xtPay"></hs-input>
                <span v-else>{{payData[scope.$index].xtPay}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="balance" >
              <template slot="header">
              余额付款
              <br v-if="params.type === 'add'" /><span v-if="params.type === 'add'" style="font-weight:100;font-size:10px;">可使用余额￥{{stuBalance}}</span>
            </template>
              <template slot-scope="scope">
                <hs-input v-if="params.type === 'add'" @input="stuBalanceChange($event,scope.$index)"  v-money size="mini" v-model.trim="payData[scope.$index].balance"></hs-input>
                <span v-else>{{payData[scope.$index].balance}}</span>
              </template>
            </el-table-column>
            <el-table-column align="center" prop="payAmount" label="本次收款">
              <template slot-scope="scope">
                  <span>{{ payAmount(scope.row) || 0 }}</span>
              </template>
            </el-table-column>
        </el-table>

        <div class="flex mt20">
            <el-tooltip class="item" effect="dark" :content="explain.receivableAmount" placement="top-start">
                <div class="w25p f20">本次应收：{{utilHtml.generatingThousandthPer(receivableAmount)}}</div>
            </el-tooltip>
            <el-tooltip class="item" effect="dark" :content="explain.payAmount" placement="top-start">
                <div v-if="params.type === 'view'" class="w25p f20">本次收款：{{utilHtml.generatingThousandthPer(viewPayAmount)}}</div>
                <div v-else  class="w25p f20">本次收款：{{utilHtml.generatingThousandthPer(getAmount)}}</div>
            </el-tooltip>
            <el-tooltip class="item" effect="dark" :content="explain.arrears" placement="top-start">
                <div class="w25p f20">本次欠费：{{utilHtml.generatingThousandthPer(arrears)}}</div>
            </el-tooltip>
            <el-tooltip class="item" effect="dark" :content="explain.balance" placement="top-start">
              <div v-if="params.type === 'view'" class="w25p f20">本次产生余额：{{utilHtml.generatingThousandthPer(viewAccountAmount)}}</div>
              <div v-else class="w25p f20">本次产生余额：{{utilHtml.generatingThousandthPer(balance)}}</div>
            </el-tooltip>
        </div>
        <div class="flex mt30">
            <p class="flex-shrink">单据摘要：</p>
            <el-input style="margin-top:5px;" maxlength="200" show-word-limit
                v-if="params.type !== 'view'"
                type="textarea" :rows="3" placeholder="请输入内容"
                v-model="remark">
            </el-input>
            <p v-else>{{remark}}</p>
        </div>
        <div class="text-center">
            <el-button v-loading="loading" v-if="params.type === 'add'" class="mt30" type="primary" @click="insertFee">人工收费</el-button>
            <el-button v-loading="loading" v-if="params.type === 'edit'" class="mt30" type="primary" @click="updateFee">修改收费</el-button>
        </div>
        </div>
        </div>
</template>

<script lang="ts">
import { Vue, Component, Prop } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import DetailDialog from '@/components/busi/table/detail.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import util from '@/utils/busi/util'
import { studentApi } from '@/api/studentcenter'
import { collectApi } from '@/api/collect'
import { MessageBox } from 'element-ui'
import dayjs from 'dayjs'
import { getConstantByGroup } from '@/utils/dicts/constdict'
import { baseApi } from '@/api/base'
import { LocalStorage } from '@/utils/storage'
import { getConstantDict } from '@/utils/common'
@Component({
  name: 'collect-manage-detail',
  components: {
    SimpleTable,
    DetailDialog,
    DictSelect
  }
})
export default class GradeManage extends Vue {
  @Prop({ type: Object })
  private userInfo!: object|any

  private params: any = util.getRouterParams()
  private dayjs = dayjs
  private visible = false
  private utilHtml = util
  private amountForm = { }
  private form = {
    schoolYear: '',
    payTime: (new Date()).valueOf()
  }

  private schoolYears = []

  private remark = ''
  private loading = false
  private listInfo = {
    stuId: '',
    payRecordId: ''
  }

  private dictBusiness (business: any) {
    if (!business) return ''
    const businessDict = LocalStorage.getObj('constant-businessType')
    // eslint-disable-next-line eqeqeq
    return businessDict.filter((v: any) => v.key == business)[0].value
  }

  private schoolYearName (schoolYear: any) {
    const res: any = this.schoolYears.filter((v: any) => v.key === schoolYear)
    if (res.length > 0) return res[0].value
    return schoolYear
  }

  private emptyText = '暂无数据'
  private explain = {
    receivableAmount: '勾选项本次应收之和',
    payAmount: '本次收款=收款方式缴费金额+余额付款',
    arrears: '本次欠费=勾选项本次应收-上次已收-上次已退-本次收费',
    balance: '本次收款-本次收费（勾选项）总额=本次产生余额产生的余额将计入个人账户中'
  }

  private stuBalanceInfo:any = 0
  private async getStuBalance () {
    const { stuId } = this.listInfo
    await studentApi('stuAccountDetail', { id: stuId }).then((res: any) => {
      if (res.code === 10000) {
        this.stuBalanceInfo = (res.object.info.balance * 0.01) || 0
      }
    })
  }

  private pickerOptions = {
    disabledDate: (time: any) => {
      const _now = Date.now()
      return time.getTime() > _now
      // 大于当前的禁止，小于7天前的禁止
    }
  }

  // 付款方式
  private payData:any= [{
    cash: 0,
    brushCard: 0,
    transferMoney: 0,
    aliPay: 0,
    wechatPay: 0,
    oneCodePay: 0,
    payPlatform: 0,
    xtPay: 0,
    balance: 0
  }]

  private viewInfo:any = {
    payTime: '',
    billNo: '',
    createTime: '',
    status: '',
    createName: '',
    tradeType: ''
  }

  // 收款方式
  private get payAmount () {
    return function (row:any) {
      return row.cash * 1 + row.brushCard * 1 + row.transferMoney * 1 + row.aliPay * 1 +
      row.wechatPay * 1 + row.oneCodePay * 1 + row.payPlatform * 1 + row.xtPay * 1 + row.balance * 1
    }
  }

  // 学生余额
  private get stuBalance () {
    return this.stuBalanceInfo
  }

  private get receivableAmount () {
    return this.thisTime.receivableAmount
  }

  private get getAmount () {
    return this.payAmount(this.payData[0]) || 0
  }

  private get arrears () {
    return this.thisTime.arrears
  }

  private get balance () {
    const feesBalance = (this.payAmount(this.payData[0]) || 0) - this.thisTime.feesCharge
    return feesBalance < 0 ? 0 : feesBalance
  }

  private thisTime = {
    receivableAmount: 0,
    arrears: 0,
    alreadyRefundAmount: 0,
    alreadyReductionAmount: 0,
    feesCharge: 0,
    feesMoney: 0
  }

  // 输入页面
  private feesChargeChange (feesBal:any, index:any) {
    feesBal = feesBal.replace(/\.{1,}/g, '.') // 只保留第一个. 清除多余的
    feesBal = feesBal
      .replace('.', '$#$')
      .replace(/\./g, '')
      .replace('$#$', '.')
      // eslint-disable-next-line no-useless-escape
    feesBal = feesBal.replace(/^(\-)*(\d+)\.(\d\d).*$/, '$1$2.$3') // 只能输入两个小数
    if (feesBal.indexOf('.') < 0 && feesBal !== '') {
      // 以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额
      feesBal = parseFloat(feesBal)
    }

    const { receivableMoney, reduceMoney, feesMoney, refundMoney } = this.list[index]
    const oweFree = (receivableMoney - reduceMoney - feesMoney + refundMoney).toFixed(2)

    if (feesBal > oweFree) {
      feesBal = oweFree
    }
    this.list[index].feesCharge = feesBal
  }

  // 余额付款
  private stuBalanceChange (stuBal:any, index:any) {
    stuBal = stuBal.replace(/[^(\d|.)]/g, '')
    stuBal = stuBal.replace(/\.{1,}/g, '.') // 只保留第一个. 清除多余的
    stuBal = stuBal
      .replace('.', '$#$')
      .replace(/\./g, '')
      .replace('$#$', '.')
      // eslint-disable-next-line no-useless-escape
    stuBal = stuBal.replace(/^(\-)*(\d+)\.(\d\d).*$/, '$1$2.$3') // 只能输入两个小数
    if (stuBal.indexOf('.') < 0 && stuBal !== '') {
      // 以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额
      stuBal = parseFloat(stuBal)
    }
    if (stuBal > this.stuBalanceInfo) {
      stuBal = this.stuBalanceInfo
    }
    this.payData[index].balance = stuBal
  }

  // 支付
  private stuPayChange (stuBal:any, scope:any) {
    stuBal = stuBal.replace(/[^(\d|.)]/g, '')
    stuBal = stuBal.replace(/\.{1,}/g, '.') // 只保留第一个. 清除多余的
    stuBal = stuBal
      .replace('.', '$#$')
      .replace(/\./g, '')
      .replace('$#$', '.')
      // eslint-disable-next-line no-useless-escape
    stuBal = stuBal.replace(/^(\-)*(\d+)\.(\d\d).*$/, '$1$2.$3') // 只能输入两个小数
    if (stuBal.indexOf('.') < 0 && stuBal !== '') {
      // 以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额
      stuBal = parseFloat(stuBal)
    }
    this.payData[0][scope.column.property] = stuBal
  }

  private list: any = []

  // 付款方式
  private payWay = ''
  private preTime = (new Date()).valueOf()
  private expressCharge (columns: any) {
    const currentTime = (new Date()).valueOf()
    if (columns.property !== 'payAmount' && this.params.type !== 'view' && this.payWay === columns.property &&
    (currentTime - this.preTime < 300)) {
      if (this.params.type === 'edit' && columns.property === 'balance') return false
      this.payData = [{
        cash: 0,
        brushCard: 0,
        transferMoney: 0,
        aliPay: 0,
        wechatPay: 0,
        oneCodePay: 0,
        payPlatform: 0,
        xtPay: 0,
        balance: 0
      }]
      if (columns.property === 'balance') {
        this.payData[0][columns.property] = Math.min(this.thisTime.feesCharge, this.stuBalance) || 0
      } else {
        this.payData[0][columns.property] = this.thisTime.feesCharge || 0
      }
    }
    this.payWay = columns.property
    this.preTime = currentTime
  }

  private setColSpan () {
    setTimeout(() => {
      if (this.$el.querySelector('#feeTable')) {
        var current = (this.$el as any)
          .querySelector('#feeTable')
          .querySelector('.el-table__footer-wrapper')
          .querySelector('.el-table__footer')
        var cell = current.rows[0].cells
        cell[0].colSpan = '3'
        if (this.params.type !== 'add') {
          cell[0].colSpan = '6'
          cell[3].style.display = 'none'
          cell[4].style.display = 'none'
          cell[5].style.display = 'none'
        }
        cell[1].style.display = 'none'
        cell[2].style.display = 'none'
      }
    }, 50)
  }

  // 单行结算
  private get CurrentOweFee () {
    // 本欠 = 应收 - 已减 -已收 + 已退 - 本收
    return function (row:any) {
      const oweFeeInfo = row.receivableMoney - row.reduceMoney - row.feesMoney + row.refundMoney - (row.feesCharge || 0)
      if (oweFeeInfo.toFixed(2) === '-0.00') {
        return 0
      } else {
        return oweFeeInfo.toFixed(2)
      }
    }
  }

  private crruentRow:any = {} // 当前点击行
  private selectedRow:any = []// 被选行

  private selectAllFun (selection: any) {
    if (selection.length !== 0) {
      selection = util.reduplicate(selection, 'feeItemId')
    }
    this.selectedRow = selection
    const len = this.list.length
    for (let i = 0; i < len; i++) {
      this.list[i].edit = false
      this.selectedRow.map((v: any) => {
        if (v === this.list[i]) {
          this.list[i].edit = true
        }
      })
    }
  }

  private selectedSimple (selection: any, row: any) {
    const selected = selection.length && selection.indexOf(row) !== -1
    this.crruentRow = row
    if (selected) {
      this.selectedRow.forEach((v:any, index:any) => {
        if (v.feeItemId === this.crruentRow.feeItemId) {
          (this.$refs.feeTable as any).toggleRowSelection(v, false)
          selection.splice(index, 1)
        }
      })
      this.$nextTick(function () {
        if (this.crruentRow.edit === true) {
          (this.$refs.feeTable as any).toggleRowSelection(this.crruentRow, true)
        }
      })
    }
    this.selectedRow = selection
    const len = this.list.length
    for (let i = 0; i < len; i++) {
      this.list[i].edit = false
      this.selectedRow.map((v: any) => {
        if (v === this.list[i]) {
          this.list[i].edit = true
        }
      })
    }
  }

  private selectionChange (selected: any) {
    this.thisTime = {
      receivableAmount: 0,
      arrears: 0,
      alreadyRefundAmount: 0,
      alreadyReductionAmount: 0,
      feesCharge: 0,
      feesMoney: 0
    }

    if (this.params.type !== 'add') {
      this.selectedRow = selected
      const len = this.list.length
      for (let i = 0; i < len; i++) {
        this.list[i].edit = false
        this.selectedRow.map((v: any) => {
          if (v.feeItemId === this.list[i].feeItemId) {
            this.list[i].edit = true
          }
        })
      }
    }
  }

  // 合计
  getSummaries (param: any) {
    const { columns } = param
    const sums: any = []
    columns.forEach((column: any, index: any) => {
      if (index === 0) {
        sums[index] = '合计（勾选项）'
        return
      }
      let values = this.selectedRow.map((item: any) => Number(item[column.property]))

      // 本次欠费
      if (index === columns.length - 1) {
        values = this.selectedRow.map((row: any) =>
          Number(row.receivableMoney - row.reduceMoney - row.feesMoney + row.refundMoney - row.feesCharge))
      }

      if (!values.every((value: any) => isNaN(value))) {
        const account = values.reduce((prev: any, curr: any) => {
          const value = Number(curr)
          if (!isNaN(value)) {
            return prev + curr
          } else {
            return prev
          }
        }, 0)

        if (column.property === 'receivableMoney') {
          this.thisTime.receivableAmount = account || 0
        }

        if (column.property === 'deptType') {
          this.thisTime.arrears = account.toFixed(2) || 0
        }

        if (column.property === 'feesCharge') {
          this.thisTime.feesCharge = account.toFixed(2) || 0
        }

        if (column.property === 'reduceMoney') {
          this.thisTime.alreadyReductionAmount = account || 0
        }

        if (column.property === 'feesMoney') {
          this.thisTime.feesMoney = account || 0
        }

        if (column.property === 'refundMoney') {
          this.thisTime.alreadyRefundAmount = account || 0
        }

        if (account.toFixed(2) === '-0.00') {
          sums[index] = util.generatingThousandthPer(0)
        } else {
          sums[index] = util.generatingThousandthPer(account.toFixed(2))
        }
      } else {
        sums[index] = ''
      }
    })
    return sums
  }

  // 清空表格
  private resetCount () {
    this.thisTime = {
      receivableAmount: 0,
      arrears: 0,
      alreadyRefundAmount: 0,
      alreadyReductionAmount: 0,
      feesCharge: 0,
      feesMoney: 0
    }

    this.payData = [{
      cash: 0,
      brushCard: 0,
      transferMoney: 0,
      aliPay: 0,
      wechatPay: 0,
      oneCodePay: 0,
      payPlatform: 0,
      xtPay: 0,
      balance: 0
    }]
    this.selectedRow = []
    this.list = []
  }

  // 全日制收费待收费项目
  private async payItemList () {
    const { stuId } = this.listInfo
    const { stuSchoolId, stuSubjectId, stuGradeId } = this.userInfo
    const resYear = await baseApi('getBySchoolSubjectGrade', {
      schoolId: stuSchoolId,
      subjectId: stuSubjectId,
      gradeId: stuGradeId,
      schoolYear: this.form.schoolYear
    })
    if (resYear.code === 10000) {
      if (resYear.object.list.length <= 0) {
        this.resetCount()
        this.emptyText = '学年暂无可收的收费标准，请前往设置'
        return false
      }
    } else {
      this.$alert(resYear.message, { type: 'error' })
    }

    await collectApi('ptUnPayItemList', { stuId, schoolYear: this.form.schoolYear }).then((res: any) => {
      if (res.code === 10000) {
        this.list = res.object.list
        if (this.list.length === 0) {
          this.resetCount()
          this.emptyText = '该学年学生收费标准已收齐'
          return false
        }

        this.$nextTick(function () {
          let selection: any[] = []
          this.list.forEach((row:any) => {
            if (row.ifMust) {
              (this.$refs.feeTable as any).toggleRowSelection(row, true)
              selection.push(row)
            }
          })
          if (selection.length !== 0) {
            selection = util.reduplicate(selection, 'feeItemId')
          }
          this.selectedRow = selection
          const len = this.list.length
          for (let i = 0; i < len; i++) {
            this.list[i].edit = false
            this.selectedRow.map((v: any) => {
              if (v === this.list[i]) {
                this.list[i].edit = true
              }
            })
          }
        })
      }
    })
  }

  // 学年
  private schoolYearChange () {
    this.onQuery()
  }

  // 分配金额查询
  private onQuery () {
    if (this.params.type === 'add') {
      this.payItemList()
    }
  }

  // 学生信息
  private async stuDetail () {
    if (this.params.type === 'add') {
      await collectApi('mathNowYear', {
        businessId: this.userInfo.stuBusinessId,
        gradeId: this.userInfo.stuGradeId,
        schoolId: this.userInfo.stuSchoolId
      }).then(async (resYear: any) => {
        if (resYear.code === 10000) {
          if (resYear.object && resYear.object.info && resYear.object.info.year) {
            this.form.schoolYear = resYear.object.info.year
            this.schoolYearChange()
          }
        }
      }).catch((err: any) => {
        console.log('err', err)
      })
    }
  }

  private selectInit () {
    return (this.params.type === 'add')
  }

  private conPayType:any = []

  private viewPayAmount:any = ''
  private viewAccountAmount:any = ''

  // 全日制收费详情
  private async payRecord () {
    const { payRecordId } = this.listInfo
    await collectApi('ptPayRecordInfo', { id: payRecordId }).then((res: any) => {
      if (res.code === 10000) {
        const {
          cash, brushCard, transferMoney, aliPay, wechatPay, oneCodePay, payPlatform, xtPay, accountPay,
          remark, payTime, schoolYear, items, billNo, createTime, status, createName, tradeType, payAmount, accountAmount
        } = res.object.info
        this.viewPayAmount = payAmount
        this.viewAccountAmount = accountAmount
        let payTypeName = '未知'
        this.conPayType.forEach((element:any) => {
          if (element.key === tradeType) {
            payTypeName = element.value
          }
        })

        // 查看详情
        this.viewInfo = {
          payTime,
          billNo,
          createTime,
          status,
          createName,
          tradeType: payTypeName
        }

        // 分配金额
        this.list = items.map(function (item:any) {
          const {
            business, schoolName, feeItemName, feeMust, receivableAmount, payAmount,
            alreadyReductionAmount, acceptedAmount, alreadyRefundAmount, gradeName, schoolYear
          } = item

          return {
            business,
            schoolName,
            gradeName,
            schoolYear,
            feeItemName,
            ifMust: feeMust,
            reduceMoney: alreadyReductionAmount,
            feesMoney: acceptedAmount,
            refundMoney: alreadyRefundAmount,
            receivableMoney: receivableAmount,
            feesCharge: payAmount
          }
        })

        this.$nextTick(function () {
          this.list.forEach((row:any) => {
            (this.$refs.feeTable as any).toggleRowSelection(row, true)
          })
        })

        this.payData = [{
          cash,
          brushCard,
          transferMoney,
          aliPay,
          wechatPay,
          oneCodePay,
          payPlatform,
          xtPay,
          balance: accountPay
        }]
        this.remark = remark
        this.form = {
          schoolYear,
          payTime
        }
      }
    })
  }

  // 新增收费
  private async insertFee () {
    this.loading = true
    const { stuId } = this.listInfo
    const { schoolYear, payTime } = this.form
    const { stuGradeName, stuSchoolCode, stuName, stuBusinessId, stuSchoolId, stuSchoolName, stuSubjectId, stuSubjectName, stuGradeId } = this.userInfo
    const { cash, brushCard, transferMoney, aliPay, wechatPay, oneCodePay, payPlatform, xtPay, balance } = this.payData[0]
    const items:any = []
    this.selectedRow.forEach((element:any) => items.push({
      stuId,
      stuCode: stuSchoolCode,
      stuName,
      business: stuBusinessId,
      schoolId: stuSchoolId,
      schoolName: stuSchoolName,
      subjectId: stuSubjectId,
      subjectName: stuSubjectName,
      gradeId: stuGradeId,
      gradeName: stuGradeName,
      schoolYear,
      feeStandardId: element.feeStandardId,
      feeItemId: element.feeItemId,
      feeItemName: element.feeItemName,
      feeMust: element.ifMust,
      payAmount: element.feesCharge,
      receivableAmount: element.receivableMoney,
      acceptedAmount: element.feesMoney,
      alreadyReductionAmount: element.reduceMoney,
      alreadyRefundAmount: element.refundMoney,
      arrearsAmount: this.CurrentOweFee(element) || 0
    }))

    console.log()

    const insertFeeInfo:any = {
      stuId,
      stuCode: stuSchoolCode,
      stuName,
      business: stuBusinessId,
      schoolId: stuSchoolId,
      schoolName: stuSchoolName,
      subjectId: stuSubjectId,
      subjectName: stuSubjectName,
      gradeId: stuGradeId,
      gradeName: stuGradeName,
      schoolYear,
      payTime,
      receivableAmount: this.thisTime.receivableAmount,
      payAmount: this.payAmount(this.payData[0]) || 0,
      arrearsAmount: this.thisTime.arrears,
      accountAmount: this.balance,
      acceptedAmount: this.thisTime.feesMoney,
      alreadyReductionAmount: this.thisTime.alreadyReductionAmount,
      alreadyRefundAmount: this.thisTime.alreadyRefundAmount,
      remark: this.remark,
      items,
      cash,
      brushCard,
      transferMoney,
      aliPay,
      wechatPay,
      oneCodePay,
      payPlatform,
      xtPay,
      accountPay: balance
    }

    await collectApi('ptPayInsert', insertFeeInfo).then((res: any) => {
      this.loading = false
      if (res.code === 10000) {
        MessageBox.confirm(
          '收费操作成功', '成功', {
            confirmButtonText: '确定',
            showClose: !1,
            showCancelButton: !1,
            closeOnClickModal: !1
          }).then(async () => {
          this.$router.back()
        })
      } else {
        this.$alert(res.message, { type: 'error' })
      }
    }).catch((err:any) => {
      this.loading = false
      console.log(err)
    })
  }

  // 修改已处理
  private async updateFee () {
    this.loading = true
    const { payTime } = this.form
    const { payRecordId } = this.listInfo
    const { cash, brushCard, transferMoney, aliPay, wechatPay, oneCodePay, payPlatform, xtPay } = this.payData[0]
    const updateInfo:any = {
      id: payRecordId,
      payTime,
      cash,
      brushCard,
      transferMoney,
      aliPay,
      wechatPay,
      oneCodePay,
      payPlatform,
      xtPay,
      payAmount: this.payAmount(this.payData[0]) || 0,
      remark: this.remark
    }
    await collectApi('ptPayUpdate', updateInfo).then((res: any) => {
      this.loading = false
      if (res.code === 10000) {
        MessageBox.confirm(
          '收费修改成功', '成功', {
            confirmButtonText: '确定',
            showClose: !1,
            showCancelButton: !1,
            closeOnClickModal: !1
          }).then(async () => {
          this.$router.back()
        })
      } else {
        this.$alert(res.message, { type: 'error' })
      }
    }).catch((err:any) => {
      this.loading = false
      console.log(err)
    })
  }

  private async initData () {
    this.params = util.getRouterParams()
    this.conPayType = await getConstantByGroup('tradeType')
    if (Object.keys(this.params).length === 0) return
    if (this.params.info) {
      this.listInfo = this.params.info
      this.stuDetail()
      if (this.params.type !== 'add') {
        this.payRecord()
      }
    }
    this.schoolYears = await getConstantDict('schoolYear')
    this.onQuery()
    this.setColSpan()
    this.getStuBalance()
  }

  async activated () {
    await this.initData()
  }

  async beforeMount () {
    await this.initData()
  }
}
</script>

<style lang="scss" scoped>
@import "../../../collect";

::v-deep .gutter {
  display: table-cell !important;
}

::v-deep .el-table__row{
  height: 40px;
  line-height: 40px;
}

::v-deep .has-gutter th:hover{
  cursor: pointer;
  background-color: #ddd;
}

::v-deep .hs-input .hs-input__inner {
  text-align: center;
}

</style>
