<template>
  <simple-container-column @on-query="onQuery" @on-reset="onReset" :menuName="menuName">
    <template slot="left">
      <tree url="/fcs/schoolBusiness/tree" :props="{ children: 'children', label: 'name' }" @node-click="handleNodeClick"></tree>
    </template>
    <template slot="query">
      <hs-form ref="form" :model="form" label-width="98px" :inline="true">
        <hs-form-item label="院校代码">
          <hs-input
            size="mini"
            v-model="form.schoolCode"
            placeholder="请输入院校代码"
          ></hs-input>
        </hs-form-item>
        <hs-form-item label="院校名称">
          <hs-input
            size="mini"
            v-model="form.schoolName"
            placeholder="请输入院校名称"
          ></hs-input>
        </hs-form-item>
      </hs-form>
    </template>
    <template>
      <simple-table :columnable="!1" :isCheckbox="!1" :data="tableData" :columns="columns" :loading="loading" @query="onQuery" :pagination.sync="pagination" :dicts="['schoolStatus']"></simple-table>
    </template>
  </simple-container-column>
</template>

<script lang="ts">
import { Vue, Component } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import SimpleContainerColumn from '@/components/container/column/index.vue'
import Tree from '@/components/busi/custom/tree.vue'
import util from '@/utils/busi/util'
import { baseApi } from '@/api/base'

@Component({
  name: 'busi-manage',
  components: {
    SimpleContainerColumn,
    SimpleTable,
    Tree
  }
})
export default class BusiManage extends Vue {
  private form: any = {
  }

  private loading = !1

  private tableData = {
    list: [],
    totalCount: 0
  }

  private columns = [{
    prop: 'schoolCode',
    label: '院校代码'
  },
  {
    prop: 'studyName',
    label: '学习类型'
  },
  {
    prop: 'schoolName',
    label: '院校名称'
  },
  {
    prop: 'schoolStatus',
    label: '院校状态',
    'style-format': {
      f: [0],
      t: [1]
    }
  }]

  private pagination: any = {
    currentPage: 1,
    pageSize: 10
  }

  private async onQuery (pagination: any = null) {
    // do something
    this.loading = !0
    const form = util.trimForm(this.form)
    !pagination && (this.pagination.currentPage = 1)
    await baseApi('businessSchoolList', {
      ...form,
      ...pagination || this.pagination
    }).then(async (res: any) => {
      this.loading = !1
      this.tableData.list = res.object.list
      this.tableData.totalCount = res.object.totalCount
    }).catch((err: any) => {
      console.log('err', err)
      this.loading = !1
    })
  }

  private onReset () {
    this.form = {
    }
    this.onQuery()
  }

  handleNodeClick (data: any) {
    this.form.businessId = data.id
    this.onQuery()
  }

  mounted () {
    this.onQuery()
  }
}
</script>

<style lang="scss" scoped>
@import "./index";
</style>
