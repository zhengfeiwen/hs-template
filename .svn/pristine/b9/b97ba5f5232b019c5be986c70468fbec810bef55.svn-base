<template>
  <transition name="fade-transform" mode="out-in">
    <div class="busi-drawer-container">
      <div v-for="(item, i) in data" :key="i" :class="itemClass(i, curItem)" @click="itemClick(i)">{{ item.value }}</div>
    </div>
  </transition>
</template>

<script lang="ts">
import { LocalStorage } from '@/utils/storage'
import { Vue, Component, Prop, PropSync, Watch } from 'vue-property-decorator'

@Component({
  name: 'drawer-select'
})
export default class DrawerSelect extends Vue {
  @Prop({ type: Boolean, default: !0 })
  private stick!: boolean

  @Prop({ type: Array })
  private data!: any[]

  @PropSync('value', { type: Object })
  private valueSync!: object|any

  @Watch('valueSync', { deep: !0 })
  private curItemChange () {
    // LocalStorage.setObj('busi-drawer-value', this.valueSync)
    this.data.map((v, i) => {
      if (v.key === this.valueSync.key) {
        this.curItem = i
      }
    })
  }

  private curItem = -1

  private itemClass (i: number, cur: number) {
    return {
      item: !0,
      active: i === cur
    }
  }

  private itemClick (i: any) {
    this.curItem = i
    this.valueSync = Object.assign(this.data[i])
  }

  mounted () {
    // const lastCur = LocalStorage.getObj('busi-drawer-value')
    // if (Object.keys(lastCur).length > 0) {
    //   this.valueSync = lastCur
    //   console.log(Object.keys(lastCur).length, this.valueSync, lastCur)
    // }
    this.data.map((v, i) => {
      if (v.value === this.valueSync.key) {
        this.curItem = i
      }
    })
  }
}
</script>
<style lang="scss">
  .busi-drawer-container{
    height: 100%;
    width: 100%;
    border-right: solid 1px #e6e6e6;
    .item{
      position: relative;
      font-size: 14px;
      width: 80px;
      margin: 10px auto;
      padding: 10px 0;
      text-align: center;
      cursor: pointer;
      &:hover{
        color: #fff;
        background-color:  #4285F4;
        border-radius: 4px;
      }
      &.active{
        color: #fff;
        background-color:  #4285F4;
        border-radius: 4px;
      }
    }
  }
</style>
