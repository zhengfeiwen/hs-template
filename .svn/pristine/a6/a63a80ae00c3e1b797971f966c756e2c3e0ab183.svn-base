import { isEmpty, isType } from '../common'
import { LocalStorage } from '../storage'
interface IUtil {
  [x:string]: any
}

const util:IUtil = {
}
// 去掉form的字段空格并且删除空值对象
util.trimForm = function (form: any) {
  const temp: any = {}
  Object.keys(form).map((key: any) => {
    if (!isEmpty(form[key])) {
      temp[key] = isType(form[key], 'string') ? form[key].trim() : form[key]
    }
  })
  return temp
}

// 日期组件的快捷配置

util.pickerOptions = {
  shortcuts: [
    {
      text: '上一周',
      onClick (picker: { $emit: (arg0: string, arg1: Date[]) => void }) {
        const end = new Date()
        const start = new Date()
        start.setTime(start.getTime() - 3600 * 1000 * 24 * 7)
        picker.$emit('pick', [start, end])
      }
    },
    {
      text: '最近一个月',
      onClick (picker: { $emit: (arg0: string, arg1: Date[]) => void }) {
        const end = new Date()
        const start = new Date()
        start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)
        picker.$emit('pick', [start, end])
      }
    },
    {
      text: '最近三个月',
      onClick (picker: { $emit: (arg0: string, arg1: Date[]) => void }) {
        const end = new Date()
        const start = new Date()
        start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)
        picker.$emit('pick', [start, end])
      }
    }
  ],
  disabledDate: !0,
  firstDayOfWeek: 7,
  cellClassName: () => 'custClass',
  onPick: null
}

const floor = (val: any, len: any) => Math.round(((val + Array(len + 1).join('0')).slice(0, len + 1) as any) / 10)

util.generatingThousandthPer = (num: any) => {
  if (num === '0' || num === 0) return '0'
  if (isNaN(parseInt(num))) return num
  if (!num) return ''
  const _num = num.toString()
  const num1 = _num.split('.')[0]
  const num2 = floor(_num.split('.')[1], 2)
  let c = num1.toString()
  if (parseInt(num) >= 1000) c = c.replace(/(\d)(?=(?:\d{3})+$)/g, '$1, ')
  return _num.indexOf('.') !== -1 ? c + '.' + (isNaN(num2) ? '00' : num2) : c + '.00'
}

util.getRouterParams = function () {
  return JSON.parse(LocalStorage.get('routerParams') as any || '')
}

util.extendItems = function (items: any) {
  const _items = items || (document.getElementsByClassName('query-block')[0].parentNode as any).getElementsByClassName('hs-form-item')
  for (let i = 0; i < _items.length - 1; i++) {
    _items[i].style.display = ''
  }
}

util.foldItems = function (items: any) {
  const _items = items || (document.getElementsByClassName('query-block')[0].parentNode as any).getElementsByClassName('hs-form-item')
  const len = util.initFlexFormOption.max
  for (let i = 0; i < _items.length - 1; i++) {
    _items[i].style.display = ''
    if (i >= len) {
      _items[i].style.display = 'none'
    }
  }
}

util.statusChange = function (status: any) {
  setTimeout(() => {
    if (status === 'extend') {
      util.foldItems()
      util.initFlexFormOption.fold.classList.remove('active')
      util.initFlexFormOption.extend.classList.add('active')
    } else {
      util.extendItems()
      util.initFlexFormOption.extend.classList.remove('active')
      util.initFlexFormOption.fold.classList.add('active')
    }
  })
}

const extendBtn = '<a id="extend"><i class="el-icon-d-arrow-right" /></a>'

const foldBtn = '<a id="fold"><i class="el-icon-d-arrow-left" /></a>'

util.initFlexFormOption = {}

util.initFlexForm = function (option: any = { max: 7 }) {
  const $form: any = document.getElementsByClassName('query-block')[0].parentNode
  util.initFlexFormOption = option
  // form 样式处理
  $form.style['padding-right'] = '180px'
  // $form.style['background-image'] = 'linear-gradient(#fff, #f7f4f4)'
  const items = $form.getElementsByClassName('hs-form-item')
  if (items.length > util.initFlexFormOption.max + 1) {
    util.foldItems(items)
    const extend = document.createElement('div')
    extend.classList.add('extend')
    extend.classList.add('active')
    extend.innerHTML = extendBtn
    const fold = document.createElement('div')
    fold.classList.add('fold')
    fold.innerHTML = foldBtn
    // $form.append(extend)
    // $form.append(fold)
    const queryBlock: any = document.getElementsByClassName('query-block')[0].getElementsByClassName('hs-form-item__content')[0]
    queryBlock.prepend(extend)
    queryBlock.prepend(fold)
    // extend.prependTo(queryBlock)
    // fold.prependTo(queryBlock)
    util.initFlexFormOption.fold = fold
    util.initFlexFormOption.extend = extend
    const extendEl: any = extend.querySelector('#extend')
    const foldEl: any = fold.querySelector('#fold')
    extendEl.addEventListener('click', () => {
      extend.classList.remove('active')
      fold.classList.add('active')
      util.extendItems(items)
    })
    foldEl.addEventListener('click', () => {
      fold.classList.remove('active')
      extend.classList.add('active')
      util.foldItems(items)
    })
  }
}

export default util
