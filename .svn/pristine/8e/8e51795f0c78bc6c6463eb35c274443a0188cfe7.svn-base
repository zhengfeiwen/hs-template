<template>
  <div :class="{'has-logo': showLogo}">
    <sidebar-logo
      v-if="showLogo"
      :collapse="isCollapse"
    />
    <el-scrollbar wrap-class="scrollbar-wrapper">
      <el-menu
        :default-active="activeMenu"
        :collapse="isCollapse"
        :background-color="subMenuBg"
        :text-color="variables.menuText"
        :active-text-color="menuActiveTextColor"
        :unique-opened="false"
        :collapse-transition="false"
        mode="vertical"
      >
        <template
            v-for="route in subMenu">
          <sidebar-item
            :key="route.path"
            :item="route"
            :base-path="route.path"
            :is-collapse="isCollapse"
            @click="updateMenuName"
          ></sidebar-item>
        </template>
      </el-menu>
    </el-scrollbar>
  </div>
</template>

<script lang="ts">
import { Component, Vue } from 'vue-property-decorator'
import { AppModule } from '@/store/modules/app'
import { SettingsModule } from '@/store/modules/settings'
import SidebarItem from './SidebarItem.vue'
import SidebarLogo from './SidebarLogo.vue'
import variables from '@/styles/_variables.scss'
import { MenuModule } from '@/store/modules/menu'

@Component({
  name: 'SideBar',
  components: {
    SidebarItem,
    SidebarLogo
  }
})
export default class extends Vue {
  get sidebar () {
    return AppModule.sidebar
  }

  get subMenu () {
    return MenuModule.subMenu
  }

  get showLogo () {
    return SettingsModule.showSidebarLogo
  }

  get menuActiveTextColor () {
    if (SettingsModule.sidebarTextTheme) {
      return SettingsModule.theme
    } else {
      return variables.menuActiveText
    }
  }

  get subMenuBg () {
    if (SettingsModule.subMenuBg) {
      return SettingsModule.subMenuBg
    } else {
      return variables.subMenuBg
    }
  }

  get variables () {
    return variables
  }

  get activeMenu () {
    const route = this.$route
    const { meta, path } = route
    // if set path, the sidebar will highlight the path you set
    if (meta.activeMenu) {
      return meta.activeMenu
    }
    return path
  }

  get isCollapse () {
    return !this.sidebar.opened
  }

  private updateMenuName () {
    this.$emit('update-menu-name')
  }
}
</script>

<style lang="scss">
.el-tooltip__popper[x-placement^=right] .popper__arrow{
  left: -5px !important;
  &:after{
    left: 0 !important;
  }
}
.sidebar-container {
  // reset element-ui css
  .horizontal-collapse-transition {
    transition: 0s width ease-in-out, 0s padding-left ease-in-out, 0s padding-right ease-in-out;
  }

  .scrollbar-wrapper {
    overflow-x: hidden !important;
  }

  .el-scrollbar__view {
    height: 100%;
    width: calc(100% - 4px);
    box-shadow: 5px 0 5px rgba(0, 14, 27, 0.08);
  }

  .el-scrollbar__bar {
    &.is-vertical {
      right: 0px;
    }

    &.is-horizontal {
      display: none;
    }
  }
}
</style>

<style lang="scss" scoped>
.el-scrollbar {
  height: 100%
}

.has-logo {
  .el-scrollbar {
    height: calc(100% - 50px);
  }
}

.el-menu {
  border: none;
  height: 100%;
  width: 100% !important;
  background-color: $subMenuBg !important;
}
</style>
