<template>
  <div class="optionmanage-container">
    <div class="left-block">
      <div class="tree-block">
        <tree url="/fcs/option/optionTypesTree" @node-click="handleNodeClick"></tree>
      </div>
    </div>
    <div class="right-block">
      <section>
        <simple-table :index="!0" :isCheckbox="!1" :data="tableData" :columns="columns" :loading="loading" @query="onQuery" :pagination.sync="pagination" :dicts="['schoolState']">
          <template slot="operator" slot-scope="{ scope }">
            <hs-button
              @click.native.prevent="showDetail(scope.row)"
              type="text"
              size="small">
              详情
            </hs-button>
          </template>
        </simple-table>
      </section>
    </div>
    <detail-dialog title="详情" :data="detailData" :visible.sync="visible"></detail-dialog>
  </div>
</template>

<script lang="ts">
import { Vue, Component } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import DetailDialog from '@/components/busi/table/detail.vue'
import Tree from '@/components/busi/custom/tree.vue'
import util from '@/utils/busi/util'
import { settingApi } from '@/api/settingmanage'

@Component({
  name: 'fcsOptionManageMenu',
  components: {
    SimpleTable,
    DetailDialog,
    Tree
  }
})
export default class OptionManage extends Vue {
  private form: any = {
  }

  private loading = !1

  private tableData = {
    list: [],
    totalCount: -1
  }

  private columns = [{
    prop: 'optionKey',
    label: '字典key'
  },
  {
    prop: 'optionValue',
    label: '字典值'
  },
  {
    prop: 'optionTYpe',
    label: '字典类型'
  },
  {
    prop: 'memo',
    label: '描述'
  }]

  private pagination: any = {
    currentPage: 1,
    pageSize: 10
  }

  private async onQuery (pagination: any = null) {
    // do something
    this.loading = !0
    const form = util.trimForm(this.form)
    !pagination && (this.pagination.currentPage = 1)
    await settingApi('optionList', {
      ...form,
      ...pagination || this.pagination
    }).then(async (res: any) => {
      this.loading = !1
      this.tableData.list = res.object.list
      this.tableData.totalCount = res.object.totalCount
    }).catch((err: any) => {
      console.log('err', err)
      this.loading = !1
    })
  }

  private onReset () {
    this.form = {
    }
    this.onQuery()
  }

  handleNodeClick (data: any) {
    this.form.businessId = data.businessId
    this.onQuery()
  }

  private visible = !1

  private detailData = {}

  private async showDetail (row: any) {
    await settingApi('optionDetail', { id: row.id }).then((res: any) => {
      if (res.code === 10000) {
        this.visible = !0
        this.detailData = {
          businessName: res.object.businessName,
          businessStateName: res.object.stateName,
          memo: res.object.memo
        }
      }
    })
  }

  mounted () {
    this.onQuery()
  }
}
</script>

<style lang="scss" scoped>
@import "./index";
</style>
