<template>
<div>
  <UserInfo :userInfo="userInfo" /> <!-- 学生信息 -->
  <div class="detail-line">

    <div v-if="params.type === 'view'" class="mb30">
        <div  class="line user-info-box" style="margin-left:50px;">
          <div class="w25p">流水号：{{ viewInfo.billNo }}</div>
          <div class="w30p">创建时间：{{ viewInfo.createTime ? dayjs(viewInfo.createTime).format('YYYY年MM月DD日HH时mm分') : '' }}</div>
          <div class="w20p">流水状态：
          <span class="deep-green" v-if="viewInfo.status !== 2">正常</span>
          <span class="red" v-else>{{viewInfo.status !== 1?'':'作废'}}</span>
          </div>
          <div class="w20p">操作人:{{ viewInfo.createName }}</div>
      </div>
      <div  class="line user-info-box" style="margin-left:50px;">
          <div class="w25p">缴费时间：{{ viewInfo.payTime ? dayjs(viewInfo.payTime).format('YYYY年MM月DD日HH时mm分') : '' }}</div>
          <div class="w30p">缴费类型：{{ viewInfo.tradeType }}</div>
          <div class="w30p">一次性收费：{{ viewInfo.collectYearName }}</div>
      </div>
    </div>
    <div class="f20" v-if="params.type === 'add'" >分配金额</div>
    <header class="mt10">
      <hs-form ref="form" :model="form" label-width="98px" :inline="true">
        <hs-form-item label="学年">
          <dict-select :disabled="params.type !== 'add'" @change="schoolYearChange" :val.sync="form.schoolYear" constant-group-name="schoolYear"></dict-select>
        </hs-form-item>
        <hs-form-item label="缴费时间">
          <el-date-picker
            v-model="form.payTime"
            value-format="timestamp"
            type="datetime"
            format="yyyy-MM-dd HH:mm"
            :picker-options="pickerOptions"
            size="mini"
            :disabled="params.type === 'view'"
            placeholder="选择日期时间">
          </el-date-picker>
        </hs-form-item>
      </hs-form>
    </header>
  <hs-table id="feeTable"
  :empty-text="emptyText"
    ref="feeTable"
   :data="list" :border="true" :show-summary="true"
    @select-all="selectAllFun"
    @select="selectedSimple"
    @selection-change="selectionChange"
    :summary-method="getSummaries"
    style="width: 100%" header-row-class-name="header-style">
    <el-table-column align="center" v-if="params.type === 'add'" type="selection" width="55" :selectable="selectInit" ></el-table-column>
    <hs-table-column v-if="params.type !== 'add'" prop="businessName" label="缴费业务"></hs-table-column>
    <hs-table-column v-if="params.type !== 'add'" prop="schoolName" label="缴费院校"></hs-table-column>
    <hs-table-column v-if="params.type !== 'add'" prop="gradeName" label="缴费年级"></hs-table-column>
    <hs-table-column v-if="params.type !== 'add'" prop="schoolYearName" label="学年"></hs-table-column>
    <hs-table-column prop="feeItemName" label="收费项目"></hs-table-column>
    <hs-table-column prop="ifMust" label="必缴">
      <template slot-scope="scope">
        {{ scope.row.ifMust === 1 ? '是' : '否' }}
      </template>
    </hs-table-column>
    <hs-table-column prop="receivableMoney" label="应收"></hs-table-column>
    <hs-table-column prop="reduceMoney" :formatter="formatterMoney" label="已减免"></hs-table-column>
    <hs-table-column prop="refundMoney" label="已退"></hs-table-column>
    <hs-table-column prop="feesMoney" label="已收"></hs-table-column>
    <hs-table-column prop="feesCharge" label="本次预交">
    <template slot-scope="scope">
      <span v-if="!list[scope.$index].edit || params.type !== 'add'">{{ list[scope.$index].feesCharge }}</span>
      <hs-input v-else v-money size="mini" @click="change(scope.$index)" v-model.trim="list[scope.$index].feesCharge"></hs-input>
    </template>
    </hs-table-column>
  </hs-table>
  <div class="f20 mt20 mb20">收款方式 <span class="f12 ml10 red" v-if="params.type === 'add'">双击收费方式可快捷收费</span> </div>
  <el-table :data="payData" style="width: 100%" :border="true" @header-click="expressCharge" >
    <el-table-column align="center" prop="cash" label="现金">
      <template slot-scope="scope">
        <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].cash"></hs-input>
        <span v-else>{{payData[scope.$index].cash}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="brushCard" label="刷卡">
      <template slot-scope="scope">
        <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'"   v-money size="mini" v-model.trim="payData[scope.$index].brushCard"></hs-input>
        <span v-else>{{payData[scope.$index].brushCard}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="transferMoney" label="转账">
      <template slot-scope="scope">
        <hs-input  @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].transferMoney"></hs-input>
        <span v-else>{{payData[scope.$index].transferMoney}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="aliPay" label="支付宝">
      <template slot-scope="scope">
        <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'"  v-money size="mini" v-model.trim="payData[scope.$index].aliPay"></hs-input>
        <span v-else>{{payData[scope.$index].aliPay}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="wechatPay" label="微信">
      <template slot-scope="scope">
        <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].wechatPay"></hs-input>
        <span v-else>{{payData[scope.$index].wechatPay}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="oneCodePay" label="一码通">
      <template slot-scope="scope">
        <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].oneCodePay"></hs-input>
        <span v-else>{{payData[scope.$index].oneCodePay}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="payPlatform" label="缴平台">
      <template slot-scope="scope">
        <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].payPlatform"></hs-input>
        <span v-else>{{payData[scope.$index].payPlatform}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="xtPay" label="秀推">
      <template slot-scope="scope">
        <hs-input @input="stuPayChange($event,scope)" v-if="params.type !== 'view'" v-money size="mini" v-model.trim="payData[scope.$index].xtPay"></hs-input>
        <span v-else>{{payData[scope.$index].xtPay}}</span>
      </template>
    </el-table-column>
    <el-table-column align="center" prop="payAmount" label="本次预收款">
      <template slot-scope="scope">
          <span>{{ payAmount(scope.row) || 0 }}</span>
      </template>
    </el-table-column>

  </el-table>
  <div class="flex mt20">
    <el-tooltip class="item" effect="dark" :content="explain.receivableAmount" placement="top-start">
        <div class="w25p f20">本次应收：{{receivableAmount}}</div>
    </el-tooltip>
    <el-tooltip class="item" effect="dark" :content="explain.payAmount" placement="top-start">
        <div class="w25p f20">本次预收款：{{ payAmount(payData[0]) || 0 }}</div>
    </el-tooltip>
    <el-tooltip class="item" effect="dark" :content="explain.balance" placement="top-start">
        <div class="w25p f20">本次产生余额：{{balance}}</div>
    </el-tooltip>
  </div>
  <div class="flex mt30">
    <p>单据摘要：</p>
    <el-input v-if="params.type !== 'view'" style="width:500px;margin-top:5px;"
      type="textarea" :rows="3" placeholder="请输入内容"
      v-model="remark">
    </el-input>
    <p v-else>{{remark}}</p>
  </div>
  <div class="text-center">
    <el-button v-loading="loading"  v-if="params.type === 'add'" class="mt30" type="primary" @click="insertFee">人工收费</el-button>
    <el-button v-loading="loading" v-if="params.type === 'edit'" class="mt30" type="primary" @click="updateFee">修改收费</el-button>
  </div>
  </div>
  </div>
</template>

<script lang="ts">
import { Vue, Component } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import UserInfo from '@/views/collect/components/userInfo.vue'
import DetailDialog from '@/components/busi/table/detail.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import util from '@/utils/busi/util'
import { commonApi } from '@/api/common'
import { collectApi } from '@/api/collect'
import { MessageBox } from 'element-ui'
import { baseApi } from '@/api/base'
import dayjs from 'dayjs'
@Component({
  name: 'collect-manage-detail',
  components: {
    SimpleTable,
    DetailDialog,
    DictSelect,
    UserInfo
  }
})
export default class GradeManage extends Vue {
  private params: any = util.getRouterParams()
  private visible = false
  private dayjs = dayjs
  private amountForm = { }
  private form = {
    schoolYear: '',
    payTime: (new Date()).valueOf()
  }

  private emptyText = '暂无数据'

  private profile:any = ''
  private remark = ''
  private loading = false
  private listInfo = {
    stuId: '',
    payRecordId: ''
  }

  private pickerOptions = {
    disabledDate: (time: any) => {
      const _now = Date.now()
      return time.getTime() > _now
      // 大于当前的禁止，小于7天前的禁止
    }
  }

  private explain = {
    receivableAmount: '勾选项本次应收之和',
    payAmount: '本次预交款=收款方式缴费金额',
    balance: '本次产生余额= 本次预收款-本次预交合计'
  }

  // 付款方式
  private payData:any= [{
    cash: 0,
    brushCard: 0,
    transferMoney: 0,
    aliPay: 0,
    wechatPay: 0,
    oneCodePay: 0,
    payPlatform: 0,
    xtPay: 0
  }]

  // 收款方式
  private get payAmount () {
    return function (row:any) {
      return row.cash * 1 + row.brushCard * 1 + row.transferMoney * 1 + row.aliPay * 1 +
      row.wechatPay * 1 + row.oneCodePay * 1 + row.payPlatform * 1 + row.xtPay * 1
    }
  }

  private get receivableAmount () {
    return util.generatingThousandthPer(this.thisTime.receivableAmount)
  }

  private get arrears () {
    return util.generatingThousandthPer(this.thisTime.arrears)
  }

  // 支付
  private stuPayChange (stuBal:any, scope:any) {
    stuBal = stuBal.replace(/[^(\d|.)]/g, '')
    stuBal = stuBal.replace(/\.{1,}/g, '.') // 只保留第一个. 清除多余的
    stuBal = stuBal
      .replace('.', '$#$')
      .replace(/\./g, '')
      .replace('$#$', '.')
      // eslint-disable-next-line no-useless-escape
    stuBal = stuBal.replace(/^(\-)*(\d+)\.(\d\d).*$/, '$1$2.$3') // 只能输入两个小数
    if (stuBal.indexOf('.') < 0 && stuBal !== '') {
      // 以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额
      stuBal = parseFloat(stuBal)
    }
    this.payData[0][scope.column.property] = stuBal
  }

  private sumArray:any = {
    ifMust: 0,
    receivableMoney: 0,
    reduceMoney: 0,
    refundMoney: 0,
    feesMoney: 0
  }

  // 本次产生余额 本次预收款 - 欠费（应收 - 已减 -已收 + 已退）
  private get balance () {
    const balanceInfo = (this.payAmount(this.payData[0]) || 0) - (this.sumArray.receivableMoney - this.sumArray.reduceMoney - this.sumArray.feesMoney + this.sumArray.refundMoney)
    return balanceInfo < 0 ? 0 : balanceInfo
  }

  // 单行结算
  private get CurrentOweFee () {
    // 欠款 = 应收 - 已减 -已收 + 已退
    return function (row:any) {
      return row.receivableMoney - row.reduceMoney - row.feesMoney + row.refundMoney
    }
  }

  private thisTime = {
    receivableAmount: 0,
    arrears: 0,
    alreadyRefundAmount: 0,
    alreadyReductionAmount: 0,
    feesCharge: 0
  }

  private list: any = []

  // 付款方式
  private payWay = ''
  private preTime = (new Date()).valueOf()
  private expressCharge (columns: any) {
    const currentTime = (new Date()).valueOf()
    if (columns.property !== 'payAmount' && this.params.type !== 'view' && this.payWay === columns.property &&
    (currentTime - this.preTime < 300)) {
      this.payData = [{
        cash: 0,
        brushCard: 0,
        transferMoney: 0,
        aliPay: 0,
        wechatPay: 0,
        oneCodePay: 0,
        payPlatform: 0,
        xtPay: 0
      }]
      this.payData[0][columns.property] = this.thisTime.feesCharge || 0
    }
    this.payWay = columns.property
    this.preTime = currentTime
  }

  private setColSpan () {
    setTimeout(() => {
      if (this.$el.querySelector('#feeTable')) {
        var current = (this.$el as any)
          .querySelector('#feeTable')
          .querySelector('.el-table__footer-wrapper')
          .querySelector('.el-table__footer')
        var cell = current.rows[0].cells
        cell[0].colSpan = '3'
        if (this.params.type !== 'add') {
          cell[0].colSpan = '6'
          cell[3].style.display = 'none'
          cell[4].style.display = 'none'
          cell[5].style.display = 'none'
        }
        cell[1].style.display = 'none'
        cell[2].style.display = 'none'
      }
    }, 50)
  }

  private crruentRow:any = {} // 当前点击行
  private selectedRow:any = []// 被选行
  private selectAllFun (selection: any) {
    if (selection.length !== 0) {
      selection = util.reduplicate(selection, 'feeItemId')
    }
    this.selectedRow = selection
    const len = this.list.length
    for (let i = 0; i < len; i++) {
      this.list[i].edit = false
      this.selectedRow.map((v: any) => {
        if (v === this.list[i]) {
          this.list[i].edit = true
        }
      })
    }
  }

  private selectedSimple (selection: any, row: any) {
    const selected = selection.length && selection.indexOf(row) !== -1
    this.crruentRow = row
    if (selected) {
      this.selectedRow.forEach((v:any, index:any) => {
        if (v.feeItemId === this.crruentRow.feeItemId) {
          (this.$refs.feeTable as any).toggleRowSelection(v, false)
          selection.splice(index, 1)
        }
      })
      this.$nextTick(function () {
        if (this.crruentRow.edit === true) {
          (this.$refs.feeTable as any).toggleRowSelection(this.crruentRow, true)
        }
      })
    }
    this.selectedRow = selection
    const len = this.list.length
    for (let i = 0; i < len; i++) {
      this.list[i].edit = false
      this.selectedRow.map((v: any) => {
        if (v === this.list[i]) {
          this.list[i].edit = true
        }
      })
    }
  }

  private selectionChange (selected: any) {
    this.sumArray = {
      ifMust: 0,
      receivableMoney: 0,
      reduceMoney: 0,
      refundMoney: 0,
      feesMoney: 0
    }

    this.thisTime = {
      receivableAmount: 0,
      arrears: 0,
      alreadyRefundAmount: 0,
      alreadyReductionAmount: 0,
      feesCharge: 0
    }

    if (this.params.type !== 'add') {
      this.selectedRow = selected
      const len = this.list.length
      for (let i = 0; i < len; i++) {
        this.list[i].edit = false
        this.selectedRow.map((v: any) => {
          if (v.feeItemId === this.list[i].feeItemId) {
            this.list[i].edit = true
          }
        })
      }
    }
  }

  // 合计
  getSummaries (param: any) {
    const { columns } = param
    const sums: any = []

    columns.forEach((column: any, index: any) => {
      if (index === 0) {
        sums[index] = '合计（勾选项）'
        return
      }
      const values = this.selectedRow.map((item: any) => Number(item[column.property]))
      if (!values.every((value: any) => isNaN(value))) {
        const account = values.reduce((prev: any, curr: any) => {
          const value = Number(curr)
          if (!isNaN(value)) {
            return prev + curr
          } else {
            return prev
          }
        }, 0)

        if (column.property === 'receivableMoney') {
          this.thisTime.receivableAmount = account || 0
        }

        if (column.property === 'reduceMoney') {
          this.thisTime.alreadyReductionAmount = account || 0
        }

        if (column.property === 'refundMoney') {
          this.thisTime.alreadyRefundAmount = account || 0
        }

        if (column.property === 'feesCharge') {
          this.thisTime.feesCharge = account || 0
        }

        this.sumArray[column.property] = account
        sums[index] = util.generatingThousandthPer(account)
      } else {
        sums[index] = ''
      }
    })
    return sums
  }

  // 清空表格
  private resetCount () {
    this.sumArray = {
      ifMust: 0,
      receivableMoney: 0,
      reduceMoney: 0,
      refundMoney: 0,
      feesMoney: 0
    }

    this.thisTime = {
      receivableAmount: 0,
      arrears: 0,
      alreadyRefundAmount: 0,
      alreadyReductionAmount: 0,
      feesCharge: 0
    }

    this.payData = [{
      cash: 0,
      brushCard: 0,
      transferMoney: 0,
      aliPay: 0,
      wechatPay: 0,
      oneCodePay: 0,
      payPlatform: 0,
      xtPay: 0
    }]
    this.selectedRow = []
    this.list = []
  }

  // 全日制收费待收费项目
  private async payItemList () {
    const { stuId } = this.listInfo
    const { stuSchoolId, stuSubjectId, stuGradeId } = this.userInfo
    const resYear = await baseApi('getBySchoolSubjectGrade', {
      schoolId: stuSchoolId,
      subjectId: stuSubjectId,
      gradeId: stuGradeId,
      schoolYear: this.form.schoolYear
    })

    if (resYear.code === 10000) {
      if (resYear.object.list.length <= 0) {
        this.resetCount()
        this.emptyText = '学年暂无可收的收费标准，请前往设置'
        return false
      }
    } else {
      this.$alert(resYear.message, { type: 'error' })
    }

    await collectApi('preProcessedItemList', { stuId, schoolYear: this.form.schoolYear }).then((res: any) => {
      if (res.code === 10000) {
        this.list = res.object.list
        if (this.list.length === 0) {
          this.resetCount()
          this.emptyText = '该学年学生收费标准已收齐'
          return false
        }
        this.$nextTick(function () {
          let selection: any = []
          this.list.forEach((row:any) => {
            if (row.ifMust) {
              (this.$refs.feeTable as any).toggleRowSelection(row, true)
              selection.push(row)
            }
          })
          if (selection.length !== 0) {
            selection = util.reduplicate(selection, 'feeItemId')
          }
          this.selectedRow = selection
          const len = this.list.length
          for (let i = 0; i < len; i++) {
            this.list[i].edit = false
            this.selectedRow.map((v: any) => {
              if (v === this.list[i]) {
                this.list[i].edit = true
              }
            })
          }
        })
      }
    })
  }

  // 学年
  private schoolYearChange () {
    this.onQuery()
  }

  // 分配金额查询
  private onQuery () {
    if (this.params.type === 'add') {
      this.payItemList()
    }
  }

  // 学生信息
  private async stuDetail () {
    const { stuId } = this.listInfo
    await commonApi('stuCommonDetail', { id: stuId }).then(async (res: any) => {
      if (res.code === 10000) {
        const { stuGradeId, stuSubjectId, stuSchoolId, stuSex, stuBusinessId, stuSchoolCode, stuName, stuSexName, stuGradeName, stuSubjectName, stuSchoolName, subLenName, stuPaperworkNumber } = res.object.info
        this.userInfo = {
          stuGradeId,
          stuSubjectId,
          stuSchoolId,
          stuBusinessId,
          stuSchoolCode,
          stuName,
          stuSexName,
          stuPaperworkNumber,
          stuSubjectName,
          stuSchoolName,
          subLenName,
          stuGradeName,
          stuSex
        }

        if (this.params.type === 'add') {
          await collectApi('mathNowYear', {
            businessId: stuBusinessId,
            gradeId: stuGradeId,
            schoolId: stuSchoolId
          }).then(async (resYear: any) => {
            if (resYear.code === 10000) {
              if (resYear.object && resYear.object.info && resYear.object.info.year) {
                this.form.schoolYear = resYear.object.info.year
                this.schoolYearChange()
              }
            }
          }).catch((err: any) => {
            console.log('err', err)
          })
        }
      }
    })
  }

  private selectInit () {
    return (this.params.type === 'add')
  }

  private viewInfo:any = {
    payTime: '',
    billNo: '',
    createTime: '',
    status: '',
    createName: '',
    tradeType: ''
  }

  // 全日制收费详情
  private async payRecord () {
    const { payRecordId } = this.listInfo
    await collectApi('preProcessedDetail', { id: payRecordId }).then((res: any) => {
      if (res.code === 10000) {
        const {
          cash, brushCard, transferMoney, aliPay, wechatPay, oneCodePay, payPlatform, xtPay, remark, payTime, collectYear,
          billNo, createTime, status, createName, tradeTypeName, collectYearName
        } = res.object.info

        // 查看详情
        this.viewInfo = {
          payTime,
          billNo,
          createTime,
          status,
          createName,
          tradeType: tradeTypeName,
          collectYearName
        }

        // 分配金额
        this.list = res.object.list.map(function (item:any) {
          const {
            businessName, schoolName, feeItemName, feeMust, receivableAmount, payAmount,
            alreadyReductionAmount, acceptedAmount, alreadyRefundAmount, gradeName, schoolYearName
          } = item
          return {
            edit: true,
            businessName,
            schoolName,
            gradeName,
            schoolYearName,
            feeItemName,
            ifMust: feeMust,
            reduceMoney: alreadyReductionAmount,
            feesMoney: acceptedAmount,
            refundMoney: alreadyRefundAmount,
            receivableMoney: receivableAmount,
            feesCharge: payAmount
          }
        })

        this.$nextTick(function () {
          this.list.forEach((row:any) => {
            (this.$refs.feeTable as any).toggleRowSelection(row, true)
          })
        })

        this.payData = [{
          cash,
          brushCard,
          transferMoney,
          aliPay,
          wechatPay,
          oneCodePay,
          payPlatform,
          xtPay
        }]
        this.remark = remark
        this.form = {
          schoolYear: collectYear,
          payTime
        }
      }
    })
  }

  // 用户信息
  private userInfo = {
    stuGradeId: '',
    stuSubjectId: '',
    stuSchoolId: '',
    stuBusinessId: '',
    stuSchoolCode: '',
    stuName: '',
    stuSexName: '',
    stuPaperworkNumber: '',
    stuSubjectName: '',
    stuSchoolName: '',
    subLenName: '',
    stuGradeName: '',
    stuSex: ''
  }

  // 新增收费
  private async insertFee () {
    if (this.thisTime.feesCharge !== this.payAmount(this.payData[0])) {
      this.$alert('本次预交合计应与本次预缴款相等', { type: 'error' })
      return false
    }
    this.loading = true

    const { stuId } = this.listInfo
    const { schoolYear, payTime } = this.form
    const { stuGradeName, stuSchoolCode, stuName, stuBusinessId, stuSchoolId, stuSchoolName, stuSubjectId, stuSubjectName, stuGradeId } = this.userInfo
    const { cash, brushCard, transferMoney, aliPay, wechatPay, oneCodePay, payPlatform, xtPay } = this.payData[0]
    const items:any = []
    this.selectedRow.forEach((element:any) => items.push({
      stuId,
      stuCode: stuSchoolCode,
      stuName,
      business: stuBusinessId,
      schoolId: stuSchoolId,
      schoolName: stuSchoolName,
      subjectId: stuSubjectId,
      subjectName: stuSubjectName,
      gradeId: stuGradeId,
      gradeName: stuGradeName,
      schoolYear,
      feeStandardId: element.feeStandardId,
      feeStandardCode: element.feeStandardCode,
      feeItemId: element.feeItemId,
      feeItemName: element.feeItemName,
      amount: Math.min(this.CurrentOweFee(element), element.feesCharge),
      feeMust: element.ifMust,
      payAmount: element.feesCharge,
      receivableAmount: element.receivableMoney,
      acceptedAmount: element.feesMoney,
      alreadyReductionAmount: element.reduceMoney,
      alreadyRefundAmount: element.refundMoney,
      arrearsAmount: this.CurrentOweFee(element) || 0
    }))

    const insertFeeInfo:any = {
      stuId,
      stuCode: stuSchoolCode,
      stuName,
      business: stuBusinessId,
      schoolId: stuSchoolId,
      schoolName: stuSchoolName,
      subjectId: stuSubjectId,
      subjectName: stuSubjectName,
      gradeId: stuGradeId,
      gradeName: stuGradeName,
      schoolYear,
      payTime,
      receivableAmount: this.thisTime.receivableAmount,
      payAmount: this.payAmount(this.payData[0]) || 0,
      arrearsAmount: this.thisTime.arrears,
      accountAmount: this.balance,
      acceptedAmount: this.thisTime.arrears,
      alreadyReductionAmount: this.thisTime.alreadyReductionAmount,
      alreadyRefundAmount: this.thisTime.alreadyRefundAmount,
      remark: this.remark,
      items,
      cash,
      brushCard,
      transferMoney,
      aliPay,
      wechatPay,
      oneCodePay,
      payPlatform,
      xtPay
    }
    await collectApi('processedInsert', insertFeeInfo).then((res: any) => {
      this.loading = false
      if (res.code === 10000) {
        MessageBox.confirm(
          res.message, '成功', {
            confirmButtonText: '确定',
            showCancelButton: !1,
            closeOnClickModal: !1
          }).then(async () => {
          this.$router.back()
        })
      } else {
        this.$alert(res.message, { type: 'error' })
      }
    }).catch((err:any) => {
      this.loading = false
      console.log(err)
    })
  }

  // 修改已处理
  private async updateFee () {
    if (this.thisTime.feesCharge !== this.payAmount(this.payData[0])) {
      this.$alert('本次预交合计应与本次预缴款相等', { type: 'error' })
      return false
    }
    this.loading = true
    const { payTime } = this.form
    const { payRecordId } = this.listInfo
    const { cash, brushCard, transferMoney, aliPay, wechatPay, oneCodePay, payPlatform, xtPay } = this.payData[0]
    const updateInfo:any = {
      id: payRecordId,
      payTime,
      cash,
      brushCard,
      transferMoney,
      aliPay,
      wechatPay,
      oneCodePay,
      payPlatform,
      xtPay,
      payAmount: this.payAmount(this.payData[0]) || 0,
      remark: this.remark
    }
    await collectApi('processedUpdate', updateInfo).then((res: any) => {
      this.loading = false
      if (res.code === 10000) {
        MessageBox.confirm(
          res.message, '成功', {
            confirmButtonText: '确定',
            showCancelButton: !1,
            closeOnClickModal: !1
          }).then(async () => {
          this.$router.back()
        })
      } else {
        this.$alert(res.message, { type: 'error' })
      }
    }).catch((err:any) => {
      this.loading = false
      console.log(err)
    })
  }

  private async initData () {
    if (Object.keys(this.params).length === 0) return
    if (this.params.info) {
      this.listInfo = this.params.info
      this.stuDetail()
      if (this.params.type !== 'add') {
        this.payRecord()
      }
    }
    this.onQuery()
    this.setColSpan()
  }

  async activated () {
    await this.initData()
  }

  async beforeMount () {
    await this.initData()
  }
}
</script>

<style lang="scss" scoped>
@import "../index";
@import "../../collect";

::v-deep .gutter {
  display: table-cell !important;
}

::v-deep .el-table__row{
  height: 40px;
  line-height: 40px;
}

::v-deep .has-gutter th:hover{
  cursor: pointer;
  background-color: #ddd;
}

::v-deep .hs-input .hs-input__inner {
  text-align: center;
}

</style>
