<template>
  <div :class="'simple-container-column' + (leftShort ? ' short' : '')">
    <div :class="getLeftClass">
      <div class="bg-block" v-if="this.leftShort"></div>
      <slot name="left"></slot>
      <div :class="'expend-btn' + (!leftShort ? ' left' : ' right')" @click="onExpend">
        <i :class="'el-icon-arrow-' + (!leftShort ? 'left' : 'right')"></i>
      </div>
    </div>
    <div :class="getRightClass">
      <simple-container v-if="!custom" :more="more" :menu-name="menuName" @on-query="onQuery" @on-reset="onReset">
        <template slot="title"><slot name="title"></slot></template>
        <template slot="query"><slot name="query"></slot></template>
        <template><slot></slot></template>
      </simple-container>
      <template v-else><slot></slot></template>
    </div>
  </div>
</template>
<script lang="ts">
import { Component, Prop, Vue } from 'vue-property-decorator'
import SimpleContainer from '../index.vue'
@Component({
  name: 'simple-container-column',
  components: {
    SimpleContainer
  }
})

export default class SimpleContainerColumn extends Vue {
  @Prop({ type: Boolean, default: !1 })
  private more!: boolean

  @Prop({ type: String })
  private menuName!: string

  @Prop({ type: Boolean, default: !1 })
  private custom!: boolean

  @Prop({
    type: Object,
    default: () => ({
      'left-size': 'normal'
    })
  })
  private prop!: object|any

  private onQuery () {
    this.$listeners['on-query'] && this.$emit('on-query')
  }

  private leftShort = !1

  get getLeftClass () {
    return {
      'simple-container-column-left': !0,
      'simple-container-column-left-mini': this.prop['left-size'] === 'mini',
      short: this.leftShort
    }
  }

  get getRightClass () {
    return {
      'simple-container-column-right': !0,
      'simple-container-column-right-mini': this.prop['left-size'] === 'mini',
      left: !this.leftShort,
      right: this.leftShort
    }
  }

  private onReset () {
    this.$listeners['on-reset'] && this.$emit('on-reset')
  }

  private onExpend () {
    this.leftShort = !this.leftShort
  }
}
</script>
<style lang="scss">
$left-width: 200px;
$left-width-mini: 120px;
$left-short-width: 10px;
$block-padding: 10px;
$circle-r: 20px;
$transition-s: .5s;
.simple-container-column{
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: row;
  background-color: #EAEAEA;
  &.short{
    // height: calc(100% - 6px);
  }
  .simple-container-column-left{
    transition: width $transition-s;
    position: relative;
    width: $left-width;
    height: calc(100% - #{$block-padding});
    background-color: #fff;
    border-radius: 5px;
    overflow: auto;
    margin-left: $block-padding;
    margin-top: $block-padding;
    padding: 6px;
    overflow: inherit;
    &.simple-container-column-left-mini{
      width: $left-width-mini;
    }
    .expend-btn{
      position: absolute;
      width: $circle-r;
      height: 2 * $circle-r;
      opacity: 0.8;
      top: calc(50% - 25px);
      right: 0;
      background-color: #e6e6e6;
      border: 1px solid #d9d9d9;
      line-height: 50px;
      color: #1C2E52;
      user-select: none;
      z-index: 2000;
      &.left{
        transition: $transition-s;
        text-align: right;
        border-radius: $circle-r 0 0 $circle-r;
        line-height: 2 * $circle-r;
        right: 0;
      }
      &.right{
        transition: $transition-s;
        text-align: left;
        border-radius: 0 $circle-r $circle-r 0;
        line-height: 2 * $circle-r;
        right: -8px;
      }
      &:hover{
        cursor: pointer;
        opacity: 1;
      }
      i{
        font-weight: bold;
        font-size: 18px;
      }
    }
    &.short{
      transition: width $transition-s;
      width: $left-short-width;
      .bg-block{
        position: absolute;
        height: 100%;
        width: calc(100% - 12px);
        min-width: 6px;
        z-index: 2000;
        background-color: #fff;
      }
    }
  }
  .simple-container-column-right{
    transition: width $transition-s;
    width: calc(100% - #{$left-width});
    height: 100%;
    &.simple-container-column-right-mini{
      width: calc(100% - #{$left-width-mini});
    }
    &.right{
      transition: width $transition-s;
      width: 100%;
    }
  }
}
</style>
