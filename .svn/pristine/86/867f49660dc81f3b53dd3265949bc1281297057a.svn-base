<!-- 业务下拉框 -->
<template>
    <el-popover
      v-if="collapseTags"
      placement="right"
      :disabled="labels.length === 0"
      width="220"
      trigger="hover">
      <div style="width: 200px; max-height: 400px; overflow: auto;">
        <p v-for="(sn, i) in labels" :key="i">{{ sn }}</p>
      </div>
      <div slot="reference">
        <el-select :no-data-text="noDataText" @click.native="getDatas" element-loading-spinner="el-icon-loading" :collapse-tags="collapseTags" :disabled="disabled" ref="select" :filterable="filterable" :multiple-limit="multipleLimit" v-loading="loading" v-model="valSync" :placeholder="placeholder" size="mini" :multiple="multiple" @change="change" :clearable="clearable">
          <el-option
            v-for="item in list"
            :key="item[prop.key]"
            :label="item[prop.value]"
            :value="item[prop.key]">
          </el-option>
        </el-select>
        <template slot="empty" v-if="emptyText">
          <p class="el-select-dropdown__empty">{{emptyText}}</p>
        </template>
      </div>
    </el-popover>
    <el-select :no-data-text="noDataText" v-else @click.native="getDatas" element-loading-spinner="el-icon-loading" :collapse-tags="collapseTags" :disabled="disabled" ref="select" :filterable="filterable" :multiple-limit="multipleLimit" v-loading="loading" v-model="valSync" :placeholder="placeholder" size="mini" :multiple="multiple" @change="change" :clearable="clearable">
      <el-option
        v-for="item in list"
        :key="item[prop.key]"
        :label="item[prop.value]"
        :value="item[prop.key]">
      </el-option>
      <template slot="empty" v-if="emptyText">
        <p class="el-select-dropdown__empty">{{emptyText}}</p>
      </template>
    </el-select>
</template>

<script lang="ts">
import { Vue, Component, Prop, PropSync, Watch } from 'vue-property-decorator'
import { getConstant, commonApi, getList } from '@/api/common'
import comm from './commdict'
import { LocalStorage } from '@/utils/storage'
import { getConstantDict, isEmpty, createToken } from '@/utils/common'

@Component({
  name: 'dict-select'
})
export default class DictSelect extends Vue {
  // 快速查询
  @Prop({ type: Boolean, default: !0 })
  private filterable!: boolean

  // 可清除
  @Prop({ type: Boolean, default: !0 })
  private clearable!: boolean

  // 禁用
  @Prop({ type: Boolean, default: !1 })
  private disabled!: boolean

  // 是否初始化
  @Prop({ type: Boolean, default: !1 })
  private isInit!: boolean

  // 全部选项
  @Prop({ type: Boolean, default: !1 })
  private hasAll!: boolean

  // 多选限制数
  @Prop({ type: Number })
  private multipleLimit!: number

  // 本地字段key
  @Prop({ type: String })
  private commGroupName!: string

  // 下拉数据
  @Prop({ type: Array })
  private data!: []

  // 扩展参数 url data等
  @Prop({ type: Object })
  private option!: {}|any

  // 下拉参数
  @Prop({ type: Object, default: () => ({ key: 'key', value: 'value' }) })
  private prop!: {}|any

  // 变量字典key
  @Prop({ type: String })
  private optionGroupName!: string

  // 常量字典key
  @Prop({ type: String })
  private constantGroupName!: string

  // 值
  @PropSync('val', { type: [String, Array, Number] })
  private valSync!: string|[]|number

  // 占位符
  @Prop({ type: String, default: '请选择' })
  private placeholder!: string

  // 多选时是否将选中值按文字的形式展示
  @Prop({ type: Boolean, default: !1 })
  private collapseTags!: boolean

  // 多选
  @Prop({ type: Boolean, default: !1 })
  private multiple!: boolean

  // 格式化配置
  @Prop({ type: String })
  private format!: string

  // 排除值
  @Prop({ type: Array, default: () => ([]) })
  private exclude!: []

  // 包含值
  @Prop({ type: Array, default: () => ([]) })
  private include!: []

  get getId () {
    return createToken()
  }

  // 空值显示
  @Prop({ type: String })
  private emptyText!: string

  private noDataText = !this.isInit ? '加载中...' : '无数据'

  private change (val: any) {
    // 解决切换后标签变化的顺序问题
    setTimeout(() => {
      this.labels = (this.$refs.select as any).multiple ? (this.$refs.select as any).selected.map((v: any) => v.label) : (this.$refs.select as any).selected.label
      this.$listeners.change && this.$emit('change', val, this.labels)
    })
  }

  private labels = []

  private list: any = {}

  private loading = !1

  private iniCommDict () {
    if (!this.commGroupName) return
    this.list = comm.dict(this.commGroupName)
  }

  private filterMethod (val: any) {
    this.list = this.list.filter((v: any) => {
      return val === v.value
    })
  }

  @Watch('data', { deep: !0 })
  private dataChange () {
    this.list = this.data
  }

  @Watch('list', { deep: !0 })
  private ListChange () {
    if (!this.list || this.list.length === 0) {
      this.noDataText = '无数据'
    } else {
      this.noDataText = '加载中...'
    }
  }

  private formatDict: any = {}

  private formatStr = (obj: any) => {
    if (this.format === 'subject') {
      const degree = this.formatDict.degree.filter((v: any) => v.key === obj.degree)
      const len = this.formatDict.len.filter((v: any) => v.key === obj.len)
      obj.showValue = `[${degree.length > 0 ? degree[0].value : obj.degree}]${obj.subjectName}[${len.length > 0 ? len[0].value : obj.len}]`
    }
    if (this.format === 'school') {
      obj.showValue = `${obj.schoolName}[${obj.studyName}]`
    }
    return obj
  }

  private async initFormat () {
    if (this.format === 'subject') {
      this.formatDict.degree = await getConstantDict('degree')
      this.formatDict.len = await getConstantDict('len')
    }
  }

  // 可利用该函数来实现联动效果
  public async getList () {
    if (isEmpty(this.option)) return
    await this.initFormat()
    await getList({
      url: this.option.url,
      data: this.option.data
    }).then((res: any) => {
      if (res.object) {
        if (this.format) {
          this.list = res.object.list.map((v: any) => this.formatStr(v))
        } else {
          this.list = res.object.list
        }
      }
    }).catch(err => {
      console.log('err', err)
      this.loading = !1
    })
  }

  private async getConstant () {
    if (!this.constantGroupName) return
    const key = `constant-${this.constantGroupName}`
    const list = LocalStorage.getObj(key)
    if (!isEmpty(list)) {
      this.list = list
    } else {
      await getConstant({
        groupName: this.constantGroupName,
        timeStamp: new Date().getTime()
      }).then((res: any) => {
        if (res.object) {
          this.list = res.object.list
          LocalStorage.setObj(key, this.list)
        }
      }).catch(err => {
        console.log('err', err)
        this.loading = !1
      })
    }
  }

  private async getOption () {
    if (!this.optionGroupName) return
    const key = `option-${this.optionGroupName}`
    const list = LocalStorage.getObj(key)
    if (!isEmpty(list)) {
      this.list = list
    } else {
      await commonApi('getOption', {
        optionName: this.optionGroupName
      }).then((res: any) => {
        if (res.object) {
          this.list = res.object.list
          LocalStorage.setObj(key, this.list)
        }
      }).catch((err: any) => {
        console.log('err', err)
        this.loading = !1
      })
    }
  }

  private async getDatas () {
    if (this.list.length > 0) return
    this.loading = !0
    if (this.data) {
      this.list = this.data
    }
    this.iniCommDict()// 本地字典
    await this.getList()// 通用方法
    await this.getOption() // 变量字典
    await this.getConstant() // 常量字典
    if (this.hasAll) {
      this.list = [{
        [this.prop.key]: '',
        [this.prop.value]: '全部'
      }].concat(this.list)
    }
    if (this.exclude && this.exclude.length > 0) {
      this.list = this.list.filter((v: any) => !this.exclude.includes(v.key as never))
    }
    if (this.include && this.include.length > 0) {
      this.list = this.list.filter((v: any) => this.include.includes(v.key as never))
    }
    this.loading = !1
  }

  async beforeMount () {
    this.isInit && this.getDatas()
  }
}
</script>
