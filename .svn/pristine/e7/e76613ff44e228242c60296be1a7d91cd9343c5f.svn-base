<template>
  <div class="feeitemmanage-container">
    <header>
      <hs-form ref="form" :model="form" label-width="98px" :inline="true">
        <hs-form-item label="收费项目代码">
          <hs-input size="mini" v-model="form.feeItemCode" placeholder="请输入收费项目代码"></hs-input>
        </hs-form-item>
        <hs-form-item label="收费项目名称">
          <hs-input size="mini" v-model="form.feeItemName" placeholder="请输入收费项目名称"></hs-input>
        </hs-form-item>
        <hs-form-item label="是否预收项目">
          <dict-select :val.sync="form.preFeeItem" constant-group-name="yesOrNo"></dict-select>
        </hs-form-item>
        <hs-form-item label="状态">
          <dict-select :val.sync="form.status" constant-group-name="status"></dict-select>
        </hs-form-item>
        <hs-form-item class="query-block">
          <hs-button type="primary" @click="onQuery" size="mini" icon="hs-icon-search">查询</hs-button>
          <hs-button type="default" @click="onReset" size="mini" icon="hs-icon-refresh-right">重置</hs-button>
        </hs-form-item>
      </hs-form>
    </header>
    <section>
      <simple-table ref="hsTable" :export-name="exportName" :exportable="exportable" :export-data="getExportData" :isCheckbox="!0" :data="tableData" @selection-change="selectionChange" :columns="columns" :loading="loading" @query="onQuery" :pagination.sync="pagination" :dicts="['preItem', 'status']">
        <template slot="custom_feeItemState" slot-scope="{ scope }">
            <hs-switch
              v-permission="['feeitemDisable', 'feeitemEnable']"
              v-model="scope.row.feeItemState"
              :active-value="1"
              :inactive-value="0"
              @change="change(scope.row)"
              active-color="#13ce66"
              inactive-color="#d9d9d9">
            </hs-switch>
          </template>
          <template slot="operator" slot-scope="{ scope }">
          <hs-button
            @click.native.prevent="showDetail(scope.row)"
            type="text"
            size="small">
            详情
          </hs-button>
          <hs-button
            v-permission="['feeitemUpdate']"
            @click.native.prevent="onEdit(scope.row)"
            type="text"
            size="small">
            编辑
          </hs-button>
        </template>
        <template slot="action">
          <hs-button type="primary" v-permission="['feeitemInsertInput']" icon="hs-icon-plus" @click="onAdd" size="mini">新增</hs-button>
          <hs-button type="danger" v-permission="['feeitemDelete']" icon="hs-icon-minus" @click="onRemove" size="mini">删除</hs-button>
          <hs-button type="primary" v-permission="['feeitemImport']" icon="hs-icon-upload" @click="onImport" size="mini">导入</hs-button>
          <hs-button type="success" v-permission="['feeitemExport']" icon="hs-icon-download" @click="onExport" size="mini">导出</hs-button>
        </template>
      </simple-table>
    </section>
    <detail-dialog title="详情" :data="detailData" :visible.sync="visible"></detail-dialog>
    <add-dialog :visible.sync="visibleAdd" ></add-dialog>
    <import-dialog :visible.sync="visibleImport"></import-dialog>
  </div>
</template>

<script lang="ts">
import { Vue, Component } from 'vue-property-decorator'
import SimpleTable from '@/components/busi/table/simple-table.vue'
import DetailDialog from '@/components/busi/table/detail.vue'
import AddDialog from './add/index.vue'
import ImportDialog from './add/importdialog.vue'
import DictSelect from '@/components/busi/custom/dictselect.vue'
import Tree from '@/components/busi/custom/tree.vue'
import util from '@/utils/busi/util'
import dayjs from 'dayjs'
import { checkPermission } from '@/utils/permission'
import { MessageBox } from 'element-ui'
import { itemList, itemDetail, itemEnable, itemDisable, itemDelete, itemCount } from '@/api/base'
@Component({
  name: 'feeitemmanage',
  components: {
    SimpleTable,
    ImportDialog,
    AddDialog,
    DetailDialog,
    DictSelect,
    Tree
  }
})
export default class FeeitemManage extends Vue {
  private form = {
    status: 1,
    preItem: 1
  }

  private loading = !1

  private tableData = {
    list: [],
    totalCount: 0
  }

  private columns = [{
    prop: 'feeItemCode',
    label: '收费项目代码'
  },
  {
    prop: 'feeItemName',
    label: '收费项目名称'
  },
  {
    prop: 'preItem',
    label: '是否为预收项目'
  },
  {
    prop: 'remark',
    label: '备注'
  },
  {
    prop: 'status',
    label: '状态'
  }]

  get exportName () {
    const day = dayjs(new Date()).format('YYYYMMDD')
    return `订单中心信息-${day}`
  }

  private exportParam () {
    const temp = { ...this.form }
    return util.trimForm({ ...temp }, this.columns)
  }

  private exportable = {
    exportable: checkPermission(['feeitemExport']),
    src: '/fcs/item/export',
    data: this.exportParam
  }

  private onExport () {
    (this.$refs as any).hsTable.exportHandle()
  }

  get pickerOptions () {
    return util.pickerOptions
  }

  private pagination: any = {
    currentPage: 1,
    pageSize: 10
  }

  private selectedRow: any[] = []

  private selectionChange (selected: any) {
    this.selectedRow = selected
  }

  private async onQuery (pagination: any = null) {
    this.loading = !0
    const form = util.trimForm({ ...this.form })
    !pagination && (this.pagination.currentPage = 1)
    await itemList({
      ...form,
      ...pagination || this.pagination
    }).then(async (res: any) => {
      await itemCount({
        ...form
      }).then((resCnt: any) => {
        this.loading = !1
        this.tableData.list = res.object.list
        this.tableData.totalCount = resCnt.object.totalCount
      }).catch((err: any) => {
        console.log('err', err)
        this.loading = !1
      })
    }).catch((err: any) => {
      console.log('err', err)
      this.loading = !1
    })
  }

  private onReset () {
    this.form = {
      status: 1,
      preItem: 1
    }
    this.onQuery()
  }

  private currentPage = 1

  private visible = !1

  private visibleAdd = !1

  private detailData = {}

  private async showDetail (row: any) {
    await itemDetail({ id: row.id }).then((res: any) => {
      if (res.code === 10000) {
        this.visible = !0
        this.detailData = {
          feeItemCode: res.object.info.feeItemCode,
          feeItemName: res.object.info.feeItemName,
          memo: res.object.info.memo
        }
      }
    })
  }

  private async onEdit (row: any) {
    await itemDetail({ id: row.id }).then((res: any) => {
      if (res.code === 10000) {
        this.visibleAdd = !0
        this.detailData = Object.assign({
          type: 'edit'
        }, res.object.info)
      }
    })
  }

  private async change (row: any) {
    if (row.schoolState === 1) {
      if (!row.id) {
        this.$alert('请先配置数据!')
        row.schoolState = 0
      } else {
        await itemEnable({ id: row.id })
      }
    } else {
      await itemDisable({ id: row.id })
    }
  }

  private onAdd () {
    this.visibleAdd = !0
    this.detailData = {
      type: 'add'
    }
  }

  private async onRemove () {
    // do something
    if (!this.selectedRow || this.selectedRow.length === 0) {
      this.$alert('请选择项目')
      return
    }
    const ids = this.selectedRow.map((v: any) => v.id)
    MessageBox.confirm(
      '提示：是否删除所选收费项目', '删除', {
        confirmButtonText: '确定',
        cancelButtonText: '取消'
      }).then(async () => {
      await itemDelete({
        ids: ids.join(',')
      }).then((res: any) => {
        if (res.code === 10000) {
          this.$message(res.message)
        }
      })
    })
  }

  private visibleImport = !1

  private onImport () {
    this.visibleImport = !0
  }

  mounted () {
    this.onQuery()
    util.initFlexForm()
  }
}
</script>

<style lang="scss">
@import "./index";
</style>
