<template>
  <simple-container-column :custom="!0" :prop="{ 'left-size': 'mini'}">
    <template slot="left">
      <drawer-select :data="businessList" :value.sync="curBusiness"></drawer-select>
    </template>
    <component v-if="flag" :is="componentId" :params="{ business: { ...curBusiness } }"></component>
  </simple-container-column>
</template>

<script lang="ts">
import { Vue, Component, Watch } from 'vue-property-decorator'
import SimpleContainerColumn from '@/components/container/column/index.vue'
import DrawerSelect from '@/components/busi/drawerselect.vue'
import FullRefund from './fulltime/index.vue'
import PartRefund from './parttime/index.vue'
import { getConstantByGroup } from '@/utils/dicts/constdict'
import { LocalStorage } from '@/utils/storage'
@Component({
  name: 'fcsRefundManageAuthMenu',
  components: {
    DrawerSelect,
    SimpleContainerColumn,
    FullRefund,
    PartRefund
  }
})
export default class RefundManage extends Vue {
  private businessList = []

  // 重新渲染组件 user_info_key
  private flag = !1

  private businessDict: any = {
    1: 'FullRefund',
    2: 'PartRefund',
    3: 'FullRefund',
    4: 'FullRefund',
    5: 'FullRefund'
  }

  @Watch('curBusiness', { deep: !0 })
  private curBusinessChange () {
    this.flag = !1
    setTimeout(() => {
      this.flag = !0
    })
  }

  get componentId () {
    return this.businessDict[this.curBusiness.key] || 'FullRefund'
  }

  private curBusiness: any = {}

  private async initData () {
    this.businessList = await getConstantByGroup('businessTypeLimit', { update: !0 })
    if (!this.curBusiness.value) {
      const userInfo = LocalStorage.getObj('user_info_key')
      const businessId = userInfo.businessId === 2 ? 2 : 1
      this.curBusiness = this.businessList.filter((v: any) => v.key === businessId)[0]
    }
  }

  async activated () {
    await this.initData()
  }
}
</script>

<style lang="scss">
@import "./index";
</style>
