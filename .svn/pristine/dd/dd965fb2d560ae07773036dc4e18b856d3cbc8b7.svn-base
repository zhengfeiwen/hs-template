<template>
  <div :class="classObj" class="app-wrapper">
    <div
      v-if="classObj.mobile && sidebar.opened"
      class="drawer-bg"
      @click="handleClickOutside"
    />
    <div class="container-header" :style="{'background-color': menuBg}">
      <div class="header-logo">
        <hs-image :src="logo" alt=""></hs-image>
      </div>
      <div v-if="!showSubNav" class="header-menu">
        <div v-for="(route, i) in routes" :class="{'header-menu-item': !0, 'active': route.name == curMenu }" :key="i" @click="menuClick(route.name, i)">{{ $t('route.' + route.meta.title) }}</div>
      </div>
      <div class="right-menu">
        <span @click="reloadPage" title="刷新页面"><i class="right-menu-link hs-icon-refresh-right" /></span>
        <!-- <template v-if="devicetype !== 'mobile'">
          <span @click="reloadPage" title="刷新页面"><i class="right-menu-link hs-icon-refresh-right" /></span>
          <span><i class="right-menu-link hs-icon-question" /></span>
          <span><hs-link class="right-menu-link">反馈</hs-link></span>
        </template> -->
        <el-dropdown
          class="avatar-container right-menu-item hover-effect"
          trigger="click"
        >
          <div class="avatar-wrapper">
            <div class="user-name" :title="userinfo.userName">{{ userinfo.userName }}</div>&nbsp;
            <i class="hs-icon-switch-button" />
          </div>
          <el-dropdown-menu slot="dropdown">
            <!-- <router-link to="/profile/">
              <el-dropdown-item>
                {{ $t("navbar.profile") }}
              </el-dropdown-item>
            </router-link> -->
            <!-- <router-link to="/">
              <el-dropdown-item>
                {{ $t("navbar.dashboard") }}
              </el-dropdown-item>
            </router-link> -->
            <el-dropdown-item divided @click.native="logout">
              <span style="display: block">
                {{ $t("navbar.logOut") }}
              </span>
            </el-dropdown-item>
          </el-dropdown-menu>
        </el-dropdown>
        <hs-link class="helper" @click="drawer = true">帮助与服务></hs-link>
      </div>
    </div>
    <div class="container-body">
      <sidebar @update-menu-name="updateMenuName" class="sidebar-container" />
      <div :class="{ hasTagsView: showTagsView }" class="main-container">
        <div :class="{ 'fixed-header': fixedHeader }">
          <navbar />
          <tags-view v-if="showTagsView" />
        </div>
        <app-main ref="appMain"/>
        <right-panel v-if="showSettings">
          <settings />
        </right-panel>
      </div>
    </div>
    <el-drawer
      title="帮助与服务"
      :visible.sync="drawer"
      direction="rtl"
      size="20%"
      :before-close="handleClose">
      <span>do something</span>
    </el-drawer>
  </div>
</template>

<script lang="ts">
import { Component } from 'vue-property-decorator'
import { mixins } from 'vue-class-component'
import { DeviceType, AppModule } from '@/store/modules/app'
import { SettingsModule } from '@/store/modules/settings'
import { PermissionModule } from '@/store/modules/permission'
import { UserModule } from '@/store/modules/user'
import { RightModule } from '@/store/modules/right'
import { MenuModule } from '@/store/modules/menu'
import variables from '@/styles/_variables.scss'
import { AppMain, Navbar, Settings, Sidebar, TagsView } from './components'
import RightPanel from '@/components/RightPanel/index.vue'
import ResizeMixin from './mixin/resize'
import { logOut } from '@/api/users'

@Component({
  name: 'Layout',
  components: {
    AppMain,
    Navbar,
    RightPanel,
    Settings,
    Sidebar,
    TagsView
  }
})
export default class extends mixins(ResizeMixin) {
  private logo = require('../assets/statics/pics/logo.png')
  private reloadPage () {
    (this.$refs.appMain as any).reload()
  }

  private routes: any = PermissionModule.routes.filter(v => !v.meta.hidden)

  get curMenu () {
    return MenuModule.name
  }

  get classObj () {
    return {
      hideSidebar: !this.sidebar.opened,
      openSidebar: this.sidebar.opened,
      withoutAnimation: this.sidebar.withoutAnimation,
      mobile: this.device === DeviceType.Mobile
    }
  }

  get menuBg () {
    if (SettingsModule.menuTheme) {
      return SettingsModule.menuTheme
    } else {
      return variables.menuBg
    }
  }

  get showSettings () {
    return SettingsModule.showSettings
  }

  get showTagsView () {
    return SettingsModule.showTagsView
  }

  get showSubNav () {
    return SettingsModule.showSubNav
  }

  get fixedHeader () {
    return SettingsModule.fixedHeader
  }

  private handleClickOutside () {
    AppModule.CloseSideBar(false)
  }

  get sidebar () {
    return AppModule.sidebar
  }

  get devicetype () {
    return AppModule.device.toString()
  }

  get avatar () {
    return RightModule.userInfo.avatar
  }

  get userinfo () {
    return RightModule.userinfo
  }

  private async logout () {
    // this.curMenu = ''
    await logOut().then(async () => {
      MenuModule.updateMenuName(this.curMenu)
      await UserModule.LogOut()
      this.$router
        .push(`/login?redirect=${this.$route.fullPath}`)
        .catch((err) => {
          console.warn(err)
        })
    })
  }

  private drawer = !1

  private menuClick (name: any) {
    // this.curMenu = name
    MenuModule.updateMenuName(name)
    this.$router.push(MenuModule.subMenu[0].path)
  }

  private updateMenuName () {
    MenuModule.updateMenuName(this.curMenu)
  }
}
</script>

<style lang="scss" scoped>
@import './index.scss';
</style>
<style lang="scss">
  .el-drawer__header{
    user-select: none;
  }
</style>
