<template>
  <div class="flowdetail-container">
      <hs-table
    ref="multipleTable"
    :data="tableData.list"
    style="width: 100%"
    row-key="rowId"
    border
    :show-header="true"
    :highlight-current-row="false"
    :row-class-name="tableRowClassName"
    max-height="500"
    :cell-style="{padding:'5px 0'}"
    :span-method="arraySpanMethod"
    @selection-change="handleSelectionChange"
    lazy
    :load="load"
    :loading="loading"
    :tree-props="{children: 'children', hasChildren: 'hasChildren'}">
    <hs-table-column
      prop="id"
      label="缴费院校"
      align="left" >
        <template slot-scope="scope">
          <span v-if="scope.row.hasChildren" class="flow-li">
            <span>流水号：{{ scope.row.billNo }}</span>
            <span>类型：{{ getConstantByKeyNum(scope.row.tradeType, "tradeType") }}</span>
            <span>
              本次{{ typeToName[scope.row.tradeType - 1] }}：
              <span class="blue">{{ scope.row[typeToNameEn[scope.row.tradeType - 1]] }} </span>
              <span v-if="scope.row.tradeType == 1 || scope.row.tradeType == 3">({{ x(scope.row.payType) }})</span>
            </span>
            <span>缴费时间：{{ timeConvert(scope.row.payTime) }}</span>
            <span>创建时间：{{ timeConvert(scope.row.createTime) }}</span>
            <span>操作人：{{ scope.row.createName }}</span>
            <span>流水状态：{{ getConstantByKeyNum(scope.row.status, "feesStatus") }}</span>
            <span>摘要：{{ scope.row.remark }}</span>
          </span>
          <span v-else>{{ scope.row.schoolName }}</span>
        </template>
    </hs-table-column>
    <hs-table-column
      prop="business"
      label="业务"
      align="center">
      <template slot-scope="scope">{{ getConstantByKeyNum(scope.row.business, "business") }}</template>
    </hs-table-column>
    <hs-table-column
      prop="gradeName"
      label="年级"
      align="center">
    </hs-table-column>
    <hs-table-column
      prop="subjectName"
      label="缴费专业"
      align="center">
    </hs-table-column>
    <hs-table-column
      prop="feeItemName"
      label="收费项目"
      align="center">
    </hs-table-column>
    <hs-table-column
      prop="schoolYear"
      label="学年"
      align="center">
    </hs-table-column>
    <hs-table-column
      prop="payAmount"
      label="本次收款"
      align="center"
      :formatter="moneyFormatter">
    </hs-table-column>
    <hs-table-column
      prop="reductionAmount"
      label="本次减免"
      align="center"
      :formatter="moneyFormatter">
    </hs-table-column>
    <hs-table-column
      prop="refundAmount"
      label="本次退费"
      align="center"
      :formatter="moneyFormatter">
    </hs-table-column>
    <hs-table-column
      label="操作"
      align="center">
      <template slot-scope="scope">
        <hs-button
          size="mini"
          type="text"
          @click="showDetail(scope.$index, scope.row)">详情</hs-button>
        <hs-button
          size="mini"
          type="text"
          @click="handleEdit(scope.$index, scope.row)">编辑</hs-button>
      </template>
    </hs-table-column>
    <template slot="pagination">
      <div class="action-block">
        <slot name="action"></slot>
      </div>
        <el-pagination
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
          :current-page.sync="pagination.currentPage"
          :page-sizes="[10, 20, 30, 40, 50, 100]"
          :page-size="pagination.pageSize"
          :hide-on-single-page="false"
          :pager-count="pagerCount"
          :layout="'total, sizes, prev, pager, next, jumper'"
          :total="tableData.totalCount">
        </el-pagination>
      </template>
</hs-table>
<CollectDetail :visible.sync="CollectDetailVisible"></CollectDetail>
  </div>
</template>

<script lang="ts">
import dayjs from 'dayjs'
import util from '@/utils/busi/util'
import { Component, Prop, Vue } from 'vue-property-decorator'
import { cellCallbackParams } from 'hs-elementui/src/utils/types/table'
import CollectDetail from '@/views/collect/flowdetail/collectDetail/index.vue'
import { feesList, feesItemList, feesListCount } from '@/api/studentcenter'
import { SessionStorage } from '@/utils/storage'
import { getConstant } from '@/api/common'
import { isEmpty } from '@/utils/common'
@Component({
  name: 'demo20',
  components: {
    CollectDetail
  }
})
export default class extends Vue {
  @Prop({ default: false }) private stuId!: number;

  private CollectDetailVisible = false;

  private loading = !1

  private pagerCount = 5

  private tableData = {
    list: [],
    totalCount: 0
  }

  private typeToName = ['收款', '退款', '预付款', '减免']

  private typeToNameEn = ['payAmount', 'refundAmount', 'payAmount', 'reductionAmount']

  private moneyFormatter (row: any, column: any) {
    return util.generatingThousandthPer([row[column.property]])
  }

  private pagination: any = {
    currentPage: 1,
    pageSize: 10
  }

  private async getConstant (constantGroupName: any) {
    const key = `constant-${constantGroupName}`
    let list = SessionStorage.get(key, 'array')
    if (isEmpty(list)) {
      await getConstant({
        groupName: constantGroupName
      }).then((res: any) => {
        if (res.object) {
          list = res.object.list
          SessionStorage.set(key, JSON.stringify(list))
        }
      }).catch(err => {
        console.log('err', err)
        this.loading = !1
      })
    }
  }

  private getConstantByKeyNum (keyNum: any, constantGroupName: any) {
    this.getConstant(constantGroupName)
    let constantValue: any
    const key = `constant-${constantGroupName}`
    const list = SessionStorage.get(key, 'array')
    list.forEach((item: { key: any, value: any }) => {
      if (keyNum === item.key) {
        constantValue = item.value
      }
    })
    return constantValue
  }

  private x (payType: string) {
    const payTypeArr: any[] = []
    payType.split('|').forEach((item: string) => {
      payTypeArr.push(this.getConstantByKeyNum(Number(item), 'payType'))
    })
    return payTypeArr.join('/')
  }

  private async onQuery (pagination: any = null) {
    // do something
    this.loading = !0
    await feesList({
      stuId: this.stuId,
      ...pagination || this.pagination
    }).then((res: any) => {
      this.loading = !1
      this.tableData.list = res.object.list.map((v: any) => {
        return { ...v, hasChildren: true, rowId: v.id }
      })
    }).catch((err: any) => {
      console.log('err', err)
      this.loading = !1
    })
  }

  private async getTotalCount () {
    await feesListCount({
      stuId: this.stuId
    }).then((res: any) => {
      this.tableData.totalCount = res.object.totalCount
    }).catch((err: any) => {
      console.log('err', err)
    })
  }

  // 页数变化
  private handleSizeChange (val: any) {
    this.pagination.pageSize = val
    this.pagination.currentPage = this.pagination.currentPage || 1
    this.onQuery()
  }

  // 翻页
  private handleCurrentChange (val: any) {
    this.pagination.currentPage = val
    console.log(this.tableData.totalCount)
    this.pagination.pageSize = this.pagination.pageSize || 10
    this.onQuery()
  }

  private tableRowClassName (table: any) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { row, rowIndex } = table
    if (rowIndex === 1) {
      return 'warning-row'
    } else if (rowIndex === 3) {
      return ''
    }
    return ''
  }

  private indexMethod (index: number) {
    return index * 2
  }

  private handleSelectionChange (val: any) {
    console.log(val)
  }

  private filterHandler (value: any, row: any, column: any) {
    const property = column.property
    return row[property] === value
  }

  private load = async function (tree:any, treeNode:any, resolve:any) {
    await feesItemList({ recordId: tree.id }).then((res: any) => {
      if (res.code === 10000) {
        console.log(res.object.list)
        resolve(res.object.list.map((v: any) => {
          console.log(tree.id + ':' + v.id)
          return { ...v, rowId: tree.id + ':' + v.id }
        }))
      }
    })
  }

  // private async showDetail (row: any) {
  //   await gradeDetail({ id: row.id }).then((res: any) => {
  //     if (res.code === 10000) {
  //       this.CollectDetailVisible = !0
  //       this.detailData = {
  //         gradeCode: res.object.gradeCode,
  //         gradeName: res.object.gradeName,
  //         gradeState: res.object.gradeState
  //       }
  //     }
  //   })
  //   this.CollectDetailVisible = !0
  // }

  private arraySpanMethod = function (cellCallbackParams: cellCallbackParams) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { row, column, rowIndex, columnIndex } = cellCallbackParams
    return row.hasChildren ? (columnIndex === 0 ? [1, 9] : columnIndex === 9 ? [1, 1] : [0, 0]) : (columnIndex === 9 ? [0, 0] : [1, 1])
  }

  private timeConvert (timeStamp: number) {
    return dayjs(timeStamp).format('YYYY-MM-DD HH:mm:ss')
  }

  mounted () {
    this.getConstant('tradeType')
    this.getConstant('feesStatus')
    this.getConstant('payType')
    this.getTotalCount()
    this.onQuery()
  }
}
</script>

<style lang="scss">
@import "./index";
</style>
